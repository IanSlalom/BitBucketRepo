<!--**********************************************************************************-->
<!--                                                                                  -->
<!--      This component is used when geocoding records                               -->
<!--                                                                                  -->
<!--      @author     Daniel Taylor   (MapAnything)                                   -->
<!--                  Ethan Rush      (MapAnything)                                   -->
<!--                  Eric Osborne    (MapAnything)                                   -->
<!--                                                                                  -->
<!--      @version    6/29/2016   MapAnything                                         -->
<!--      Created                                                                     -->
<!--                                                                                  -->
<!--      @copyright (c)2016 MapAnything. All Rights Reserved.                        -->
<!--      Unauthorized use is prohibited                                              -->
<!--                                                                                  -->
<!--**********************************************************************************-->

<apex:component >
    
    <apex:includeScript value="/soap/ajax/34.0/connection.js" />
    <apex:includeScript value="/soap/ajax/34.0/apex.js" />

    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery.min.js')}" />

	<script>

    	var geocodeSubset = [];
		var needsBatching = false;
    	var accIdToAddressMap = {};
    	var addressesForGeocode = [];
    	
    	var geocodedAddresses = [];
		var addressToGeocodeMap = {};
    	
    	var apexGeocodeController = 'MA_SchedulerController';
    	var submitGeocodeURL = 'https://maps.mapanythingapis.com/geocoding/v2';
        var processUpdateGeocodesResponse = { onSuccess: processUpdateGeocodesSuccess, onFailure: processGeocodeResponseError };
        var processRetrieveGeocodesResponse = { onSuccess: processRetrieveGeocodesSuccess, onFailure: processGeocodeResponseError };

        var totalAddresses = 0;

    	$(function() {
	    	sforce.connection.sessionId = '{!$Api.Session_Id}';
    	});

        /********************************************/
        /*											*/
        /* 		processes the geocode error 		*/
        /*											*/
        /********************************************/
        function processGeocodeResponseError(error) {
        	geocodedAddresses = [];
            if (!error.faultstring) {
                error = { error: 'Response Error'};
            }
            handleError('ERROR', error);
        }

        /********************************************/
        /*											*/
        /* 		displays a geocode error 	 		*/
        /*											*/
        /********************************************/
        function handleGeocodeError(componentName, error) {
            $('#errorMessage').text(componentName + ' : ' + (error.error ? error.error : error.faultstring));
            $('#errorModal').show();
            $('#errorModal').addClass('ma-open');
            $('#errorModalOverlay').addClass('ma-in');
            $('#loaderModal').hide();
        }

		/****************************************************/
        /*													*/
        /* 		retrieves accounts that need geocoding 		*/
        /*													*/
        /****************************************************/
        function retrieveAccountsForGeocode(appointmentDateString, storeId, workOrderType, resourceId) {
    		accIdToAddressMap = {};
			addressesForGeocode = [];
    		addressToGeocodeMap = {};
			sforce.apex.execute(apexGeocodeController, 'retrieveNonGeocodedAddresses', { appointmentDateString: appointmentDateString, storeId: storeId, workOrderType: workOrderType, resourceId: resourceId }, processRetrieveGeocodesResponse);
		}

		/****************************************************/
        /*													*/
        /* 		groups account addresses into groups of 10 	*/
        /* 		and request geocodes if needed otherwise 	*/
        /* 		return to process that made request 		*/
        /*													*/
        /****************************************************/
        function processRetrieveGeocodesSuccess(response) 
		{
			try{
				response = JSON.parse(response);

				if (response.success) {
					totalAddresses = response.accList.length;

					if (totalAddresses == 0) {
						//If nothing needs to be geocoded - Kick off Scheduler
						if (isBatchResources) {
							getAutoScheduleGeocoded();
						}
						else if (isDailyResource) {
							MARoutesComp.processRouteStops();
						}
						return;
					}

					var batchArray = [];
					var tempArray = [];
					var blockSize = 20;
					
					for (var i = 0, len = totalAddresses; i < len; i++) {
						tempArray.push(response.accList[i]);

						if(tempArray.length == blockSize){
							batchArray.push(tempArray);
							tempArray = [];
						}
					}
					
					//Add any reocrds from the last loop that may not have hit ID_CHUNK_SIZE array size
					if(tempArray.length > 0){
						batchArray.push(tempArray);
					}

					var q = async.queue(function (queueOptions, callback) {
						$('#loaderModal').show();

						$.ajax({
							url: submitGeocodeURL,
							type: 'GET',
							dataType: 'JSON',
							data: {
								city: queueOptions.ShippingCity,
								country: queueOptions.ShippingCountry,
								street: queueOptions.ShippingStreet,
								state: queueOptions.ShippingState,
								postal: queueOptions.ShippingPostalCode
							}
						})
						.done(function(data, textStatus, jqXHR) {

							if (data.success) {
								if (data.data != null) {
									var geoResult = data.data;
									geocodedAddresses.push({
										Id : queueOptions.Id,
										lat: geoResult.position.lat, 
										lng: geoResult.position.lng
									});
									addressToGeocodeMap[geoResult.fullAddress] = data.data;
								}
							}
							callback({success:true, data: data});
						})
						.fail(function(jqXHR, textStatus, errorThrown ) {
							processGeocodeResponseError(errorThrown);
							callback({success:false, message:errorThrown});
						})

					});

					q.concurrency = 3;
					for(var x = 0, len = batchArray.length; x < len; x ++){
						q.push(batchArray[x], function(res){
							if(!res.success){
								//This was a bad geocode
							}
							else{
								//Could update the user on how many geocodes are done. 
							}
						});
					}
					
					q.drain = function(){
						updateLatLongs();
					}
				}
				else {
					handleGeocodeError('MA_SchedulerGeocodeComp : retrieveAccountsForGeocode' + apexGeocodeController, response.error);
				}
			}
			catch(e){
				handleGeocodeError('MA_SchedulerGeocodeComp : retrieveAccountsForGeocode' + apexGeocodeController, e);
			}
		}

		/****************************************************/
        /*													*/
        /* 		updates the geocoded accounts 		 		*/
        /*													*/
        /****************************************************/
        function updateLatLongs() {
			sforce.apex.execute(apexGeocodeController, 'updateGeocodedAddresses', { geocodedAddressesString: JSON.stringify(geocodedAddresses) }, processUpdateGeocodesResponse);
		}

		/****************************************************/
        /*													*/
        /* 		returns to process that requested geocoding */
        /*													*/
        /****************************************************/
        function processUpdateGeocodesSuccess(response) {
			if (isBatchResources) {
				getAutoScheduleGeocoded();
			}
			else if (isDailyResource) {
				MARoutesComp.processRouteStops();
			}
			geocodedAddresses = [];
		}
	</script>

</apex:component>