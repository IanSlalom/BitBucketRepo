<apex:component controller="MA_SchedulerController">
    <apex:includeScript value="/soap/ajax/34.0/connection.js" />
    <apex:includeScript value="/soap/ajax/34.0/apex.js" />
    
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/moment.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery-ui.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/fullcalendar.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/scheduler.min.js')}" />
    
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/fullcalendar.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/scheduler.min.css')}" />

    <style>
        .inActiveResource {
            color: red;
        }

        .importantEventText span {
            padding-right: 5px;
        }
        
        .overflow-hidden {
            overflow: hidden !important;
        }

        div.fc-content td.fc-widget-content > div {
            min-height: 80px !important;
        }
    </style>

    <script>
        $ = jQuery.noConflict();

        var resourceIds = [];
        var resourceList = [];
        var resourceUserIds = [];
        var eventListToRender = [];
        var resourceUserIdToIdMap = {};

        var previousView;
        var initialLoad = true;
        var viewDestroy = false;
        var isPendingBatch = false;
        var isBatchResources = false;
        var newCalendarFilter = false;
        var currentUserId = '{!$User.Id}';
        var apexCalendarController = 'MA_SchedulerController';
        var processEventsResponse = { onSuccess: processEventsSuccess, onFailure: processResponseError };
        var processResourceResponse = { onSuccess: processResourceSuccess, onFailure: processResponseError };
        var processSaveNewEventResponse = { onSuccess: processSaveNewEventSuccess, onFailure: processResponseError };

        $(function() {
            sforce.connection.sessionId = '{!$Api.Session_Id}';

            $('#calendarEventCreatorDate').datepicker();

            var times = [];
            var timeOptions = '';

            for (var i = 0, len = 12; i < len; i++) {
                var hour = i == 0 ? 12 : i;
                times.push(hour+':00');
                times.push(hour+':15');
                times.push(hour+':30');
                times.push(hour+':45');
            }

            for (var i = 0, len = times.length; i < len; i++) {
                timeOptions += '<option value="' + times[i] + '">' + times[i] + '</option>';
            }
            $('#calendarEventCreatorStartTime, #calendarEventCreatorEndTime').append(timeOptions);

            initCalendar();
        });

        function initCalendar() {
            $('#calendar').fullCalendar({
                schedulerLicenseKey: '0947007917-fcs-1462891368',
                header: {
                    left: '',
                    center: 'timelineDay',
                    right: 'title prev,next today agendaDay,agendaWeek,month'
                },
                buttonText: {
                    timelineDay: 'Resources',
                    agendaDay: 'Time Slots'
                },
                views: {
                    timeline: {
                        slotDuration: '00:15:00',
                        slotLabelInterval: '00:30:00'
                    },
                    agenda: {
                        slotDuration: '00:30:00',
                        slotLabelInterval: '01:00:00'
                    }
                },
                defaultView: 'agendaDay',
                timezone: 'UTC',
                lazyFetching: false,
                selectable: true,
                handleWindowResize: true,
                allDaySlot: false,
                slotEventOverlap: true,
                height: 500,
                droppable: true,
                resourceOrder: 'name',
                resourceColumns: [
                    {
                        labelText: 'Resource',
                        field: 'name',
                        width: '150px',
                        render: function(resource, el) {
                            if (resource.isUser) {
                                el.addClass('userResource');
                            }
                            else {
                                el.addClass('externalResource');
                            }

                            if (!resource.isActive) {
                                el.addClass('inActiveResource');
                            }
                        }
                    }
                ],
                resources: function(callback) {
                    $('#loaderModal').show();
                    if (viewDestroy || !storeRetrievalProcessed) {
                        callback([]);
                    }
                    else {
                        fetchResources(callback);
                    }
                },
                events: function(start, end, timezone, callback) {
                    $('#loaderModal').show();
                    if (eventListToRender.length > 0) {
                        callback(eventListToRender);
                        eventListToRender = [];
                    }
                    else if (!storeRetrievalProcessed) {
                        callback([]);
                    }
                    else if (isBatchResources) {
                        callback([]);
                    }
                    else if ($('#calendar').fullCalendar('getView').name == 'timelineDay') {
                        fetchResourceEvents(start, end, timezone, callback);
                    }
                    else {
                        fetchWorkOrderEvents(start, end, timezone, callback);
                    }
                },
                eventClick: function(calEvent, jsEvent ,view) {
                    jsEvent.preventDefault();

                    if (calEvent.className.indexOf('maEvent') != -1 && calEvent.className.indexOf('personal') != -1) {
                        var resource = {
                            id: calEvent.resourceId,
                            resourceName: calEvent.resourceNamesText
                        };

                        $('#calendarEventCreatorEventId').val(calEvent.id);
                        showEventCreator(calEvent.start, calEvent.end, resource, true, calEvent.title);
                    }
                    else {
                        $('#eventOptionsRecordId').val(calEvent.id);
                        $('#eventOptionsMultiDayOrder').val(calEvent.multiDayOrder);
                        $('#eventOptionsDate').val(calEvent.start.format('MM/DD/YYYY'));
                        $('#eventOptionsModal').css({ position: 'absolute', top: (jsEvent.pageY - 110), left: jsEvent.pageX }).show();
                    }
                },
                eventAfterRender: function(event, element, view) {
                    if (view.name != 'month') {
                        if (event.city != '' && event.city != undefined && event.city != null) {
                            $(element).find('.fc-title').after('<div class="cityStateDiv">' + event.city + ', ' + event.state + '</div>');
                        }

                        if (event.resourceNamesText != '' && event.resourceNamesText != undefined && event.resourceNamesText != null) {
                            $(element).find('.fc-title').before('<div class="resourceNamesTextDiv">' + event.resourceNamesText + '</div>');
                        }

                        if (event.contactName != '' && event.contactName != undefined && event.contactName != null) {
                            $(element).find('.fc-title').after('<div class="eventNameDiv">' + event.contactName + '</div>');
                        }

                        if (event.multiDayOrder != '' || event.isLswp || event.isJip) {
                            var strongTextDiv = '<div class="importantEventText">';
                            if (event.multiDayOrder != '') {
                                strongTextDiv += '<span class="multiDayOrder">' + event.multiDayOrder + '</span>';
                            }

                            if (event.isLswp) {
                                strongTextDiv += '<span class="lswpSpan">LSWP</span>';
                            }

                            if (event.isJip) {
                                strongTextDiv += '<span class="jipSpan">JIP</span>';
                            }

                            strongTextDiv += '</div>';
                            $(element).find('.fc-title').after(strongTextDiv);
                        }
                    }
                    else {
                        if (event.contactName != '' && event.contactName != undefined && event.contactName != null) {
                            $(element).find('.fc-title').text(event.contactName);

                            if (event.city != '' && event.city != undefined && event.city != null) {
                                $(element).find('.fc-title').after('<div class="cityStateDiv">' + event.city + ', ' + event.state + '</div>');
                            }
                        }
                        else if (event.city != '' && event.city != undefined && event.city != null) {
                            $(element).find('.fc-title').text(event.city + ', ' + event.state);
                        }
                    }

                    if ($(element).find('.fc-time').length > 0) {
                        $(element).find('.fc-time').before('<div class="wo-icon icon-' + event.eventType + '"></div>');

                        if (event.isSynced) {
                            $(element).find('.fc-time').before('<div class="wo-icon icon-synced"></div>');
                        }
                    }
                    else {
                        $(element).find('.fc-title').before('<div class="wo-icon icon-' + event.eventType + '"></div>');

                        if (event.isSynced) {
                            $(element).find('.fc-title').before('<div class="wo-icon icon-synced"></div>');
                        }
                    }

                    var titleEl = $(element).find('.fc-title')[0];
                    var eventTitle = $(titleEl).text();
                    $(titleEl).text('');
                    $(titleEl).prepend('<span class="popupPlaceHolder">' + eventTitle + '</span>');

                    var fcContentDiv = $(element).find('.fc-content')[0];
                    var woIconsHtml = '<div id="wo-icons">';
                    var iconDivs = $(fcContentDiv).find('.wo-icon');

                    for (var i = 0, len = iconDivs.length; i < len; i++) {
                        woIconsHtml += iconDivs[i].outerHTML;
                    }
                    woIconsHtml += '</div>';

                    var calTextHtml = '<div class="calContent">';
                    var nonIconDivs = $(fcContentDiv).find('.fc-time, .fc-title, div:not(.wo-icon)');

                    for (var i = 0, len = nonIconDivs.length; i < len; i++) {
                        calTextHtml += nonIconDivs[i].outerHTML;
                    }
                    calTextHtml += '</div>';

                    $(fcContentDiv).html(woIconsHtml + calTextHtml);

                    var dataStart = $(element).find('.fc-time').attr('data-start');
                    if (dataStart != '' && dataStart != undefined && dataStart != null) {
                        $(element).attr('data-start', dataStart);
                    }
                },
                eventAfterAllRender: function(view) {
                    var records = $('.userResource > .fc-cell-text, .externalResource > .fc-cell-text');
                    for (var i = 0, len = records.length; i < len; i++) {
                        var el = records[i];
                        setUpOnHover(el, 'resource');
                        setResourceOnClick(el);
                    };

                    records = $('.maEvent > div.fc-content .fc-title .popupPlaceHolder');
                    for (var i = 0, len = records.length; i < len; i++) {
                        setUpOnHover(records[i], 'event');
                    };

                    $('#loaderModal').hide();
                    
                    /*
                    var legendHtml = '<a class="ma-button dropdown-right" id="calendarLegendTitle" onclick="openCalendarLegend();">'
                                        + 'Legend'
                                        + '<div class="dropdown-triangle-legend"></div>'
                                    + '</a>'
                                    + '<div id="calendarLegendDrop" style="display:none">'
                                        + '<div>'
                                            + '<div class="legend-icon-container">'
                                                + '<div class="legend-icon legend-icon-techmeasure"></div>'
                                            + '</div>'
                                            + '<span>Tech Measure</span>'
                                        + '</div>'
                                        + '<div>'
                                            + '<div class="legend-icon-container">'
                                                + '<div class="legend-icon legend-icon-install"></div>'
                                            + '</div>'
                                            + '<span>Install</span>'
                                        + '</div>'
                                        + '<div>'
                                            + '<div class="legend-icon-container">'
                                                + '<div class="legend-icon legend-icon-service"></div>'
                                            + '</div>'
                                            + '<span>Service</span>'
                                        + '</div>'
                                        + '<div>'
                                            + '<div class="legend-icon-container">'
                                                + '<div class="legend-icon legend-icon-synced"></div>'
                                            + '</div>'
                                            + '<span>Synced</span>'
                                        + '</div>'
                                        + '<hr class="hr-legend">'
                                        + '<div>'
                                            + '<div class="eventDot hasResource"></div>'
                                            + '<span>Assigned</span>'
                                        + '</div>'
                                        + '<div>'
                                            + '<div class="eventDot missingResource"></div>'
                                            + '<span>Unassigned</span>'
                                        + '</div>'
                                        + '<div>'
                                            + '<div class="eventDot holiday"></div>'
                                            + '<span>Holidays</span>'
                                        + '</div>'
                                    + '</div>';
                    
                    $('.fc-head .fc-axis').html(legendHtml);
                    */
                },
                viewDestroy: function(view, element) {
                    previousView = $('#calendar').fullCalendar('getView').name;
                    if (!viewDestroy && previousView == 'timelineDay' && $('.fc-button.fc-timelineDay-button.fc-state-active').length == 0) {
                        viewDestroy = true;
                        $('#calendar').fullCalendar('refetchResources');
                    }
                },
                select: function(start, end, jsEvent, view, resource) {
                    var endWeekCheck = end;
                    var endMonthCheck = end;

                    if ((view.name == 'agendaWeek' && start.format() == endWeekCheck.add(-30, 'minutes').format()) || (view.name == 'month' && start.format() == endMonthCheck.add(-1, 'days').format())) {
                        $('#calendar').fullCalendar('gotoDate', start);
                        $('#calendar').fullCalendar('changeView', 'agendaDay');
                    }
                    else if (view.name == 'timelineDay') {
                        showEventCreator(start, end, resource, false, '');
                    }
                    else {
                        $('#calendar').fullCalendar('unselect');
                    }
                }
            });

            $('.fc-button').click(function() {
                if (!viewDestroy && $('#calendar').fullCalendar('getView').name == 'timelineDay' && previousView != 'timelineDay') {
                    $('#calendar').fullCalendar('refetchResources');
                }

                viewDestroy = false;
            });

            $('.fc-timelineDay-button').hide();
            $('.fc-button-group, .fc-today-button').addClass('batchHide');

            $('div.fc-right').prepend('<div class="eventIcon" onclick=""><img src="' + "{!URLFOR($Resource.MA_Scheduler, '/icons/utility/event.svg')}" + '" class="svg mainChangeDate" /></div>');
        }

        function goToResourceView() {
            if (isBatchResources) {
                newCalendarFilter = true;
            }

            $('.fc-timelineDay-button').click();
            $('.fc-agendaDay-button, .fc-agendaWeek-button, .fc-month-button').hide();
            closeSettingsModal();
        }

        function goToWorkOrderView() {
            $('.fc-agendaDay-button, .fc-agendaWeek-button, .fc-month-button').show();
            $('.fc-agendaDay-button').click();
            closeSettingsModal();
        }

        function setUpOnHover(el, elementType) {
            var elId;
            if (elementType == 'resource') {
                elId = $(el).closest('tr').attr('data-resource-id');
            }
            else if (elementType == 'event') {
                elId = $(el).closest('a').attr('href').replace('/', '');
                $(el).removeAttr('href');
            }

            if (elId != null) {
                el.id = elId;

                if (!$(el).closest('.maEvent').hasClass('personal')) {
                    el.onblur = function() { LookupHoverDetail.getHover(elId).hide(); };
                    el.onfocus = function() { LookupHoverDetail.getHover(elId, '/'+elId+'/m?retURL=%2F'+elId+'&isAjaxRequest=1').show(); };
                    el.onmouseout = function() { LookupHoverDetail.getHover(elId).hide(); };
                    el.onmouseover = function() { LookupHoverDetail.getHover(elId, '/'+elId+'/m?retURL=%2F'+elId+'&isAjaxRequest=1').show(); };
                }
            }
        }

        function setResourceOnClick(el) {
            var parent = $(el).closest('.userResource');
            if (parent.length == 0) {
                parent = $(el).closest('.externalResource');
            }

            if (parent.length != 0) {
                parent[0].onclick = function() {
                    //if (!isBatchResources) {
                        $('#resourceRoute').attr('resource-id', $(parent).closest('tr').attr('data-resource-id'));
                        $('#resourceRoutesName').text($(el).text());
                        initializeRouteComp();
                        $('#resourceRouteModal').show();
                        $('#resourceRouteModal').addClass('ma-left-in');
                        $('#resourceRouteModal').addClass('ma-open');
                        $('#resourceRouteModalOverlay').addClass('ma-in');
                        $('body').css('overflow','hidden');
                    //}
                };
            }
        }

        function closeEventOptionsModal() {
            $('#eventOptionsModal').hide();
        }

        function filterCalendar() {
            var filter = $('#calendarFilter .calendarFilterSelect').val();
            var listViewSelect = $('#listView .listViewportWrapper .listViewport select');
            var availableOptions = $(listViewSelect).find('option:contains("' + filter + '")');

            $(availableOptions).css('display', '');
            $(listViewSelect).find('option:not(:contains("' + filter + '"))').css('display', 'none');

            if (availableOptions.length == 0) {
                $('#listView').hide();
            }
            else {
                if ($(listViewSelect).find('option[value="' + $(listViewSelect).val() + '"]').css('display') == 'none') {
                    $(listViewSelect).val($(availableOptions[0]).val())[0].onchange();
                }
                $('#listView').show();
            }

            newCalendarFilter = true;
            $('#calendar').fullCalendar('refetchResources');
        }

        function fetchResources(callback) {
            $('#loaderModal').show();
            if (initialLoad || newCalendarFilter) {
                initialLoad = false;
                newCalendarFilter = false;
                resourceIds = [];
                resourceList = [];
                resourceUserIds = [];
                resourceUserIdToIdMap = {};

                if (!isIndividual && !storeFound) {
                    callback([]);
                    $('#loaderModal').hide();
                    return;
                }

                var filters = 'Active__c = true AND Resource_Type__c != \'Scheduler\'';

                if (isIndividual) {
                    filters += ' AND RbA_User__c = \'' + currentUserId + '\'';
                }
                else {
                    var storeIdFilter = storeFound ? ' AND Retail_Location__c = \'' + $('#storeSelect').val() + '\'' : '';
                    filters += storeIdFilter;
                }

                var workOrderType = $('#calendarFilter .calendarFilterSelect').val();
                if (isBatchResources) {
                    workOrderType = $('.batch-assign-wo-container .calendarFilterSelect').val();
                }

                sforce.apex.execute(apexCalendarController, 'retrieveRecords', { objType: 'Resource', filters: filters, workOrderType: workOrderType }, processResourceResponse);
                callback([]);
            }
            else if ($('#calendar').fullCalendar('getView').name == 'timelineDay') {
                callback(resourceList);
                $('#loaderModal').hide();
            }
            else {
                callback([]);
                $('#loaderModal').hide();
            }
        }

        function processResourceSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
                for (var i = 0, len = response.objList.length; i < len; i++) {
                    var record = response.objList[i];
                    var obj = buildResourceObject(record);
                    
                    resourceList.push(obj);
                    resourceIds.push(record.Id);

                    if (obj.isUser) {
                        resourceUserIds.push(record.RbA_User__c);
                        resourceUserIdToIdMap[record.RbA_User__c] = record.Id;
                    }
                }
            }

            $('#calendar').fullCalendar('refetchResources');
            $('#calendar').fullCalendar('refetchEvents');
        }

        function buildResourceObject(record) {
            var obj = {
                id: record.Id,
                name: record.Name,
                resourceId: record.Id,
                resourceName: record.Name,
                isActive: record.Active__c,
                type: record.Resource_Type__c,
                storeId: record.Retail_Location__c,
                store: record.Retail_Location__r.Name,
                isUser: record.RbA_User__c != null && record.RbA_User__c != undefined,
                crewSize: record.Crew_Size__c != null && record.Crew_Size__c != undefined ? record.Crew_Size__c : 1
            };

            if (obj.isUser) {
                obj.name += ' (User)';
            }

            if (obj.crewSize > 1) {
                obj.name += ' (' + obj.crewSize + ' People)';
            }

            return obj;
        }
        
        function fetchResourceEvents(start, end, timezone, callback) {
            eventListToRender = getBusinessHours();
            if (resourceIds.length == 0) {
                callback([]);
                return;
            }
            
            end = new Date(end.add(2, 'days'));
            start = new Date(start.add(-2, 'days'));

            var timeWindowFilter = 'StartDateTime <= ' + end.toISOString() + ' AND EndDateTime >= ' + start.toISOString();
            var resourceIdsFilter = ' IN (\'' + resourceIds.toString().replace(new RegExp(',', 'g'), '\', \'') + '\')';
            var resourceUserIdsFilter = ' IN (\'' + resourceUserIds.toString().replace(new RegExp(',', 'g'), '\', \'') + '\')';
            var altFilters = timeWindowFilter + ' AND OwnerId' + resourceUserIdsFilter;
            var filters = timeWindowFilter.replace(new RegExp('DateTime', 'g'), 'DateTime__c') + ' AND Resource__c' + resourceIdsFilter;
            sforce.apex.execute(apexCalendarController, 'retrieveEvents', { objType: 'allEvents', filters: filters, altFilters: altFilters, resourceUserIdToIdMapString: JSON.stringify(resourceUserIdToIdMap), storeId: $('#storeSelect').val() }, processEventsResponse);
        }
        
        function fetchWorkOrderEvents(start, end, timezone, callback) {
            if ($('#calendar').fullCalendar('getView') == 'agendaDay') {
                var dayResource = { 
                    id: start.toDateString(),
                    name: '',
                    resourceId: null,
                    type: '',
                    storeId: '',
                    store: '',
                    isUser: false,
                    crewSize: 1
                };

                $('#calendar').fullCalendar('addResource', dayResource);
            }

            eventListToRender = getBusinessHours();
            
            end = new Date(end.add(2, 'days'));
            start = new Date(start.add(-2, 'days'));
            var workOrderType = $('#calendarFilter .calendarFilterSelect').val();
            var typeFilter = workOrderType == '' ? '' : ' AND RbA_Work_Order__r.Work_Order_Type__c = \'' + workOrderType + '\'';
            var storeIdFilter = storeFound ? ' AND RbA_Work_Order__r.Account__r.Store_Location__r.Active_Store_Configuration__c = \'' + $('#storeSelect').val() + '\'' : '';
            
            var timeWindowFilter = 'StartDateTime__c <= ' + end.toISOString() + ' AND EndDateTime__c >= ' + start.toISOString();
            var filters = timeWindowFilter + typeFilter + storeIdFilter;
            
            sforce.apex.execute(apexCalendarController, 'retrieveEvents', { objType: 'WorkOrder', filters: filters, resourceUserIdToIdMapString: JSON.stringify({}), storeId: $('#storeSelect').val() }, processEventsResponse);
        }

        function processEventsSuccess(response) {
            response = JSON.parse(response);
            
            if (response.success) {
                var calendarView = $('#calendar').fullCalendar('getView').name;
                for (var i = 0, len = response.eventList.length; i < len; i++) {
                    var record = response.eventList[i];

                    eventListToRender.push({
                        id: record.workOrderId,
                        resourceId: record.resourceId,
                        title: record.title,
                        start: calendarView == 'timelineDay' && record.estimatedStartDateTimeOffset != undefined && record.estimatedStartDateTimeOffset != null ? record.estimatedStartDateTimeOffset : record.startDateTimeOffset,
                        end: calendarView == 'timelineDay' && record.estimatedEndDateTimeOffset != undefined && record.estimatedEndDateTimeOffset != null ? record.estimatedEndDateTimeOffset : record.endDateTimeOffset,
                        className: record.className,
                        url: record.url,
                        contactName: record.contactName,
                        eventType: record.eventType,
                        missingResource: record.missingResource,
                        resourceNamesText: record.resourceNamesText,
                        city: record.city,
                        state: record.state,
                        isSynced: record.isSynced,
                        isLswp: record.isLswp,
                        isJip: record.isJip,
                        multiDayOrder: record.multiDayOrder
                    });
                }
            }

            if (response.showEvents) {
                $('#calendar').fullCalendar('refetchEvents');
                $('#loaderModal').hide();
            }
            else {
                sforce.apex.execute(apexCalendarController, 'retrieveHolidays', { storeId: $('#storeSelect').val() }, processEventsResponse);
            }
        }
        
        function correctForTimezoneOffset(dt) {
            var epoch = Date.parse(dt);
            epoch = epoch + (dt.getTimezoneOffset() * 60 * 1000);
            return new Date(epoch);
        }

        function getBusinessHours() {
            var events = [];
            if (storeFound) {
                events.push({start: '00:00', end: '07:00', dow: [1,3,5], color: 'lightgray', rendering: 'background'});
                events.push({start: '15:00', end: '24:00', dow: [1,3,5], color: 'lightgray', rendering: 'background'});
                events.push({start: '00:00', end: '10:00', dow: [2,4], color: 'lightgray', rendering: 'background'});
                events.push({start: '19:00', end: '24:00', dow: [2,4], color: 'lightgray', rendering: 'background'});
                events.push({start: '00:00', end: '24:00', dow: [0,6], color: 'lightgray', rendering: 'background'});
            }
            return events;
        }
        
        function openCalendarLegend() {
            $('#calendarLegendDrop').toggle();
        }

        function showEventCreator(start, end, resource, showDeleteButton, title) {
            $('#calendarEventCreatorResourceId').val(resource.id);
            $('#calendarEventCreatorSubject').val(title);
            $('#calendarEventCreatorResourceName').text(resource.resourceName);
            $('#calendarEventCreatorDate').val(start.format('MM/DD/YYYY'));
            $('#calendarEventCreatorStartTime').val(start.format('h:mm'));
            $('input[type="radio"][name="calendarEventCreatorStartTime"][value="' + start.format('A') + '"]').click();
            $('#calendarEventCreatorEndTime').val(end.format('h:mm'));
            $('input[type="radio"][name="calendarEventCreatorEndTime"][value="' + end.format('A') + '"]').click();

            if (showDeleteButton) {
                $('#deletePersonalEventButton').show();
            }
            else {
                $('#deletePersonalEventButton').hide();
                $('#calendarEventCreatorEventId').val('');
            }

            $('#calendarEventCreatorModal').addClass('ma-open').show();
            $('#calendarEventCreatorOverlay').addClass('ma-in');
        }

        function saveNewEvent(saveType) {
            $('#loaderModal').show();

            if ($('#calendar').fullCalendar('getView').name == 'timelineDay') {
                var storeId = $('#storeSelect').val();
                var eventId = $('#calendarEventCreatorEventId').val();
                var resourceId = $('#calendarEventCreatorResourceId').val();
                var subject = $('#calendarEventCreatorSubject').val();
                var dateString = $('#calendarEventCreatorDate').val();
                var startTime = $('#calendarEventCreatorStartTime').val() + ' ' + $('input[type="radio"][name="calendarEventCreatorStartTime"]:checked').val();
                var endTime = $('#calendarEventCreatorEndTime').val() + ' ' + $('input[type="radio"][name="calendarEventCreatorEndTime"]:checked').val();

                if (eventId == undefined || eventId == '') {
                    eventId = null;
                }

                sforce.apex.execute(apexCalendarController, 'createResourceEvent', { saveType: saveType, eventId: eventId, storeId: storeId, resourceId: resourceId, subject: subject, dateString: dateString, startTime: startTime, endTime: endTime}, processSaveNewEventResponse);
            }
            else {
                closeEventCreator();
            }
        }

        function processSaveNewEventSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
                $('#calendar').fullCalendar('refetchEvents');
                closeEventCreator();
            }
            else {
                handleError('MA_SchedulerCalendarComp : saveNewEvent' + apexCalendarController, response);
            }
        }

        function closeEventCreator() {
            $('#loaderModal').hide();
            $('#calendarEventCreatorModal').removeClass('ma-open');
            $('#calendarEventCreatorOverlay').removeClass('ma-in');
            $('#calendar').fullCalendar('unselect');
        }
        
        $(function() {
            jQuery('img.svg').each(function() {
                var $img = jQuery(this);
                var imgID = $img.attr('id');
                var imgClass = $img.attr('class');
                var imgURL = $img.attr('src');
            
                jQuery.get(imgURL, function(data) {
                    // Get the SVG tag, ignore the rest
                    var $svg = jQuery(data).find('svg');
            
                    // Add replaced image's ID to the new SVG
                    if (typeof imgID !== 'undefined') {
                        $svg = $svg.attr('id', imgID);
                    }

                    // Add replaced image's classes to the new SVG
                    if (typeof imgClass !== 'undefined') {
                        $svg = $svg.attr('class', imgClass+' replaced-svg');
                    }
            
                    // Remove any invalid XML tags as per http://validator.w3.org
                    $svg = $svg.removeAttr('xmlns:a');
                    
                    // Check if the viewport is set, else we gonna set it if we can.
                    if (!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
                        $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'))
                    }
            
                    // Replace image with new SVG
                    $img.replaceWith($svg);
            
                }, 'xml');
            
            });
        });
        
    </script>
    
    <div class="pad-15-10">
        <div class="hideIndividual batch-assign-btn-container batchHide" id="optimize">
            <button class="ma-button ma-button--yellow" onclick="MAschedRoutes.showOptyModal({mainPage: true});">Batch Assign</button>
        </div>

        <div id="storeSelectDiv" class="ma-form-control-wrap">
            <label class="ma-input-label">Store:</label>
            <div class="ma-form-control icon-right">
                <div class="dropdown-triangle"></div>
                <select id="storeSelect" onchange="filterCalendar();" class="ma-input" />
            </div>
        </div>
        
        <div id="calendarFilter" class="ma-form-control-wrap batchHide">
            <label class="ma-input-label">Work Order Type:</label>
            <div class="ma-form-control icon-right">
                <div class="dropdown-triangle"></div>
                <apex:form >
                    <apex:inputField value="{!tempWo.Work_Order_Type__c}" onchange="filterCalendar();" styleClass="ma-input calendarFilterSelect" />
                </apex:form>
            </div>
        </div>

        <div id="batchConfirm" class="batch-confirm-btn-container batchShow" >
            <button class ="ma-button ma-button--white" onclick ="MAschedRoutes.processBatchResults({accept: false})">Cancel Batch</button>
            <button class ="ma-button ma-button--green" onclick ="MAschedRoutes.processBatchResults({accept: true})">Confirm Batch</button>
        </div>
                                           

        <div id="eventOptionsModal">
            <input type="hidden" id="eventOptionsRecordId" />
            <input type="hidden" id="eventOptionsDate" />
            <input type="hidden" id="eventOptionsMultiDayOrder" />
            <div onclick="viewEditWorkOrder(true); closeEventOptionsModal();" class="batchHide">View / Edit</div>
            <div onclick="showAvailabilityModal(false, true); closeEventOptionsModal();" class="batchHide">Reschedule</div>
            <div onclick="showAssignResourceModal(false, true, false, isBatchResources); closeEventOptionsModal();" >Modify Resources for Entire Work Order</div>
            <div onclick="showAssignResourceModal(false, true, true, isBatchResources); closeEventOptionsModal();" >Modify Resources for this Day Only</div>
            <div onclick="showCancellationModal(true); closeEventOptionsModal();" class="batchHide">Cancel Work Order</div>
        </div>

        <div id="calendarEventCreatorModal" class="ma-modal">
            <div id="calendarEventCreatorContent" class="">
                <div id="calendarEventCreator" class="">
                    <div id="calendarEventCreatorHeader" class="">
                        <h3>Create New Resource Event</h3>
                        <span id="calendarEventCreatorModalClose" class="floatRight" onclick="closeEventCreator();">
                            <img src="{!URLFOR($Resource.MA_Scheduler, '/images/close_60.png')}" />
                        </span>
                    </div>
                    <div class="ma-modal-body">
                        <div class="ma-modal-padding">
                            <div class="resource-event-body-row">
                                <div class="ma-input-label"><strong>Resource:</strong></div>
                                <input type="hidden" id="calendarEventCreatorResourceId" />
                                <input type="hidden" id="calendarEventCreatorEventId" />
                                <div class="ma-input-label" id="calendarEventCreatorResourceName" />
                            </div>
                            <div class="resource-event-body-row">
                                <div class="ma-input-label"><strong>Date:</strong></div>
                                <input type="text" class="ma-input" id="calendarEventCreatorDate" />
                            </div>
                            <div class="resource-event-body-row">
                                <div class="ma-input-label"><strong>Start Time:</strong></div>
                                <div class="ma-form-control icon-right">
                                    <img class="ma-icon icon-right" src="http://developer.cloudbilt.com/icons/utility/down_60.png" alt="drop down" />
                                    <select class="ma-input" id="calendarEventCreatorStartTime" />
                                </div>
                                <label class="ma-input-label">
                                    <input type="radio" name="calendarEventCreatorStartTime" value="AM" checked="true"> AM</input>&nbsp;&nbsp;
                                    <input type="radio" name="calendarEventCreatorStartTime" value="PM"> PM</input>
                                </label>
                            </div>
                            <div class="resource-event-body-row">
                                <div class="ma-input-label"><strong>End Time:</strong></div>
                                <div class="ma-form-control icon-right">
                                    <img class="ma-icon icon-right" src="http://developer.cloudbilt.com/icons/utility/down_60.png" alt="drop down" />
                                    <select class="ma-input" id="calendarEventCreatorEndTime" />
                                </div>
                                <label class="ma-input-label">
                                    <input type="radio" name="calendarEventCreatorEndTime" value="AM" checked="true"> AM</input>&nbsp;&nbsp;
                                    <input type="radio" name="calendarEventCreatorEndTime" value="PM"> PM</input>
                                </label>
                            </div>
                            <div class="resource-event-body-row">
                                <div class="ma-input-label"><strong>Subject:</strong></div>
                                <input type="text" class="ma-input" id="calendarEventCreatorSubject" />
                            </div>
                       </div>
                    </div>
                    <div class="" id="calendarEventCreatorButtons">
                        <button class="ma-button ma-button--white" onclick="closeEventCreator();">Cancel</button>
                        <button class="ma-button ma-button--red" onclick="saveNewEvent('delete');" id="deletePersonalEventButton">Delete</button>
                        <button class="ma-button ma-button--green" onclick="saveNewEvent('save');">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="calendarEventCreatorOverlay" class=""></div>
        <div id="calendar"></div>
        
                
        <div id="calendarLegendTitle" class="topNav">
            <a class="ma-button dropdown-right" onclick="openCalendarLegend();">Legend
                <div class="dropdown-triangle-legend"></div>
            </a>
            <div id="calendarLegendDrop" style="display:none">
                <div>
                    <div class="legend-icon-container">
                        <div class="legend-icon legend-icon-techmeasure"></div>
                    </div>
                    <span>Tech Measure</span>
                </div>
                <div>
                    <div class="legend-icon-container">
                        <div class="legend-icon legend-icon-install"></div>
                    </div>
                    <span>Install</span>
                </div>
                <div>
                    <div class="legend-icon-container">
                        <div class="legend-icon legend-icon-service"></div>
                    </div>
                    <span>Service</span>
                </div>
                <div>
                    <div class="legend-icon-container">
                        <div class="legend-icon legend-icon-synced"></div>
                    </div>
                    <span>Synced</span>
                </div>
                    <hr class="hr-legend"/>
                <div>
                    <div class="eventDot hasResource"></div>
                    <span>Assigned</span>
                </div>
                <div>
                    <div class="eventDot missingResource"></div>
                    <span>Unassigned</span>
                </div>
                <div>
                    <div class="eventDot holiday"></div>
                    <span>Holidays</span>
                </div>
            </div>
        </div>
    </div>
</apex:component>