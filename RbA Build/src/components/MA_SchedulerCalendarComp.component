<apex:component >
    <apex:includeScript value="/soap/ajax/34.0/connection.js" />
    <apex:includeScript value="/soap/ajax/34.0/apex.js" />
    
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/moment.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery-ui.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/fullcalendar.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/scheduler.min.js')}" />
    
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/fullcalendar.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/scheduler.min.css')}" />

    <style>
        .inActiveResource {
            color: red;
        }
    </style>

    <script>
        $ = jQuery.noConflict();

        //var storeId;
        //var storeIds = [];
        //var storeMap = {};
        var resourceIds = [];
        var resourceList = [];
        var resourceUserIds = [];
        var eventListToRender = [];
        var resourceUserIdToIdMap = {};

        var previousView;
        //var storeTimezone;
        var newCalendarFilter = false;
        var initialLoad = true;
        var viewDestroy = false;
        //var isIndividual = false;
        var currentUserId = '{!$User.Id}';
        var apexCalendarController = 'MA_SchedulerController';
        var processEventsResponse = { onSuccess: processEventsSuccess, onFailure: processResponseError };
        var processResourceResponse = { onSuccess: processResourceSuccess, onFailure: processResponseError };

        $(function() {
            sforce.connection.sessionId = '{!$Api.Session_Id}';
            //getStoreTimezone();
            initCalendar();
        });

        /*
        function getStoreTimezone() {
            var response = sforce.apex.execute(apexCalendarController, 'getStoreTimezone', {});
            response = JSON.parse(response);
            console.log(response);

            if (response.success) {
                storeTimezone = response.storeTimezone;
            }
            else {
                handleError('MA_SchedulerCalendarComp : getStoreTimezone' + apexCalendarController, response);
            }
        }
        */

        function initCalendar() {
            $('#calendar').fullCalendar({
                schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
                header: {
                    //left: 'title prev,next today',
                    left: '',
                    center: '',
                    right: 'title prev,next today timelineDay,agendaDay,agendaWeek,month'
                    //right: 'title prev,next today agendaDay,agendaWeek,month'
                    //right: 'timelineDay,agendaDay,agendaWeek,month'
                    //right: 'agendaDay,agendaWeek,month'
                },
                buttonText: {
                    timelineDay: 'Resources',
                    agendaDay: 'Time Slots'
                },
                eventLimit: true,
                views: {
                    timeline: {
                        slotDuration: '00:15:00',
                        slotLabelInterval: '00:30:00'
                    },
                    agenda: {
                        slotDuration: '00:30:00',
                        slotLabelInterval: '01:00:00',
                    },
                    /*
                    agendaWeek: {
                        eventLimit: 4
                    },
                    */
                    month: {
                        eventLimit: 4
                    }
                },
                defaultView: 'agendaDay',
                //defaultTimedEventDuration: '02:00:00',
                //forceEventDuration: true,
                //timezone: 'local',
                timezone: 'UTC',
                //eventOverlap: false,
                //timezone: false,
                /*
                businessHours: [
                    {
                        start: '12:00',
                        end: '19:00',
                        dow: [2,4,6]
                    },
                    {
                        start: '09:00',
                        end: '15:00',
                        dow: [1,3,5]
                    }
                ],
                */
                lazyFetching: false,
                selectable: true,
                handleWindowResize: true,
                allDaySlot: false,
                slotEventOverlap: true,
                //nowIndicator: true,
                height: 500,
                droppable: true,
                /*
                drop: function(date, jsEvent, ui, resourceId) {
                    console.log(date);
                    console.log(resourceId);
                    this.remove();
                },
                */
                //*
                //resourceOrder: 'store,name',
                resourceOrder: 'name',
                resourceColumns: [
                    /*
                    {
                        labelText: 'Store',
                        field: 'store',
                        width: '100px',
                        group: true
                    },
                    */
                    {
                        labelText: 'Resource',
                        field: 'name',
                        width: '150px',
                        render: function(resource, el) {
                            if (resource.isUser) {
                                el.addClass('userResource');
                            }
                            else {
                                el.addClass('externalResource');
                            }

                            if (!resource.isActive) {
                                el.addClass('inActiveResource');
                            }
                        }
                    }
                ],
                //*/
                resources: function(callback) {
                    console.log('checking');
                    $('#loaderModal').show();
                    if (viewDestroy) {
                        callback([]);
                        //$('#loaderModal').hide();
                    }
                    else {
                        console.log('fetching');
                        fetchResources(callback);
                    }
                },
                events: function(start, end, timezone, callback) {
                    $('#loaderModal').show();
                    if (eventListToRender.length > 0) {
                        callback(eventListToRender);
                        eventListToRender = [];
                    }
                    else if ($('#calendar').fullCalendar('getView').name == 'timelineDay') {
                        fetchResourceEvents(start, end, timezone, callback);
                    }
                    else {
                        fetchWorkOrderEvents(start, end, timezone, callback);
                    }
                },
                eventAfterRender: function(event, element, view) {
                    if (event.contactName != '' && event.contactName != undefined && event.contactName != null) {
                        $(element).find('.fc-title').after('<div class="eventNameDiv">' + event.contactName + '</div>');
                    }

                    /*
                    if (event.eventType != '' && event.eventType != undefined && event.eventType != null) {
                        //$(element).find('.fc-title').css('display', 'inline-block').before('<div class="eventDot ' + event.eventType + '"></div>');
                        $(element).find('.fc-time').before('<div class="eventDot ' + event.eventType + '"></div>');
                    }
                    */

                    if (event.missingResource == true) {
                        //$(element).find('.fc-title').css('display', 'inline-block').before('<div class="eventDot missingResource"></div>');
                        $(element).find('.fc-time').before('<div class="eventDot missingResource"></div>');
                    }

                    var titleEl = $(element).find('.fc-title')[0];
                    var eventTitle = $(titleEl).text();
                    $(titleEl).text('');
                    $(titleEl).prepend('<span class="popupPlaceHolder">' + eventTitle + '</span>');

                    var dataStart = $(element).find('.fc-time').attr('data-start');
                    if (dataStart != '' && dataStart != undefined && dataStart != null) {
                        $(element).attr('data-start', dataStart);
                    }

                    //setUpOnHover($(element).find('div.fc-content'), 'event');
                    //setEventOnClick(element);
                },
                eventAfterAllRender: function(view) {
                    //$('.woEvent .fc-title, .maEvent .fc-title').css('display', 'inline-block').before('<div style="height: 8px; width: 8px; color: green; background-color: yellow; display: inline-block; border-radius: 50%"></div>');

                    var records = $('.userResource > .fc-cell-text, .externalResource > .fc-cell-text');
                    for (var i = 0, len = records.length; i < len; i++) {
                        var el = records[i];
                        setUpOnHover(el, 'resource');
                        setResourceOnClick(el);
                    };

                    //records = $('.sfEvent > div.fc-content, .maEvent > div.fc-content, .woEvent > div.fc-content');
                    //records = $('.maEvent > div.fc-content, .woEvent > div.fc-content');
                    records = $('.maEvent > div.fc-content .fc-title .popupPlaceHolder, .woEvent > div.fc-content .fc-title .popupPlaceHolder');
                    for (var i = 0, len = records.length; i < len; i++) {
                        setUpOnHover(records[i], 'event');
                    };

                    
                    records = $('a.fc-time-grid-event.fc-event.woEvent');
                    for (var i = 0, len = records.length; i < len; i++) {
                        setEventOnClick(records[i]);
                    };

                    $('#loaderModal').hide();

                    $('.fc-head .fc-axis').html('<a class="ma-button dropdown-right" id="calendarLegendTitle" onclick="openCalendarLegend();">Legend<div class="dropdown-triangle-legend"></div></a><div id="calendarLegendDrop" style="display:none"><div><div class="eventDot techmeasure"></div><span>Tech Measure</span></div><div><div class="eventDot workOrderSynced"></div><span>Synced</span></div><div><div class="eventDot missingResource"></div><span>Unassigned</span></div><div><div class="eventDot lswp"></div><span>LSWP</span></div></div>');
                },
                loading: function(isLoading, view) {
                    /*
                    console.log(isLoading);
                    console.log(view);
                    if (isLoading) {
                        console.log('loader show');
                        $('#loaderModal').show();
                    }
                    */



                    /*
                    else {
                        var records = $('.userResource > .fc-cell-text, .externalResource > .fc-cell-text');
                        for (var i = 0, len = records.length; i < len; i++) {
                            var el = records[i];
                            setUpOnHover(el, 'resource');
                            setResourceOnClick(el);
                        };

                        records = $('.sfEvent > div.fc-content, .maEvent > div.fc-content, .woEvent > div.fc-content');
                        for (var i = 0, len = records.length; i < len; i++) {
                            setUpOnHover(records[i], 'event');
                        };

                        $('#loaderModal').hide();
                    }
                    */
                },
                viewDestroy: function(view, element) {
                    previousView = $('#calendar').fullCalendar('getView').name;
                    if (!viewDestroy && previousView == 'timelineDay' && $('.fc-button.fc-timelineDay-button.fc-state-active').length == 0) {
                        viewDestroy = true;
                        $('#calendar').fullCalendar('refetchResources');
                    }
                },
                viewRender: function(view, element) {
                    //$('.fc-head .fc-axis').html('<a class="ma-button dropdown-right" id="calendarLegendTitle" onclick="openCalendarLegend();">Legend<div class="dropdown-triangle-legend"></div></a>');
                },
                select: function(start, end, jsEvent, view, resource) {
                    var endWeekCheck = end;
                    var endMonthCheck = end;

                    if ((view.name == 'agendaWeek' && start.format() == endWeekCheck.add(-30, 'minutes').format()) || (view.name == 'month' && start.format() == endMonthCheck.add(-1, 'days').format())) {
                        console.log(start.date());
                        $('#calendar').fullCalendar('gotoDate', start);
                        $('#calendar').fullCalendar('changeView', 'agendaDay');
                    }
                    else if (view.name == 'timelineDay') {
                        //createBusyEvent(start, end, view, resource);
                    }
                    else {
                        $('#calendar').fullCalendar('unselect');
                    }
                }
            });

            $('.fc-button').click(function() {
                if (!viewDestroy && $('#calendar').fullCalendar('getView').name == 'timelineDay' && previousView != 'timelineDay') {
                    $('#calendar').fullCalendar('refetchResources');
                }

                viewDestroy = false;
            });

            $('.fc-timelineDay-button').hide();

            //$('.fc-head .fc-axis').html('<a class="ma-button dropdown-right" id="calendarLegendTitle" onclick="openCalendarLegend();">Legend<div class="dropdown-triangle-legend"></div></a>');
        }

        function goToResourceView() {
            $('.fc-timelineDay-button').show().click();
            $('.fc-agendaDay-button, .fc-agendaWeek-button, .fc-month-button').hide();
            closeSettingsModal();
        }

        function goToWorkOrderView() {
            $('.fc-timelineDay-button').hide();
            $('.fc-agendaDay-button, .fc-agendaWeek-button, .fc-month-button').show();
            $('.fc-agendaDay-button').click();
            closeSettingsModal();
        }

        function createBusyEvent(start, end, view, resource) {
            /*
            console.log(resource);
            if (view.name == 'timelineDay') {
                var event = {
                    //id: record.WhatId,
                    resourceId: resource.resourceId,
                    title: 'Busy',
                    start: start,
                    end: end,
                    className: 'busyEvent',
                    editable: true
                    //url: '/'+record.WhatId
                };

                var response = sforce.apex.execute(apexCalendarController, 'createEvent', {obj: event});
                response = JSON.parse(response);
                console.log(response);

                if (response.success) {
                    
                }
                else {
                    handleError('MA_SchedulerCalendarComp : createBusyEvent' + apexCalendarController, response);
                }

                //calendar.renderEvent(event);
                $('#calendar').fullCalendar('renderEvent', event);
            }
            */
        }

        function setUpOnHover(el, elementType) {
            var elId;
            if (elementType == 'resource') {
                elId = $(el).closest('tr').attr('data-resource-id');
            }
            else if (elementType == 'event') {
                elId = $(el).closest('a').attr('href').replace('/', '');
            }

            if (elId != null) {
                el.id = elId;
                el.onblur = function() { LookupHoverDetail.getHover(elId).hide(); };
                el.onfocus = function() { LookupHoverDetail.getHover(elId, '/'+elId+'/m?retURL=%2F'+elId+'&isAjaxRequest=1').show(); };
                el.onmouseout = function() { LookupHoverDetail.getHover(elId).hide(); };
                el.onmouseover = function() { LookupHoverDetail.getHover(elId, '/'+elId+'/m?retURL=%2F'+elId+'&isAjaxRequest=1').show(); };
            }
        }

        function setResourceOnClick(el) {
            var parent = $(el).closest('.userResource');
            if (parent.length == 0) {
                parent = $(el).closest('.externalResource');
            }

            if (parent.length != 0) {
                parent[0].onclick = function() { alert('Hello ' + $(el).text()); };
                //parent[0].oncontextmenu = function() { alert('Hello Right ' + $(el).text()); return false; };
            }
        }

        function setEventOnClick(el) {
        	//console.log($(el));
        	$(el).removeAttr('href');
            $(el).on('click', function(e) {
                console.log(e);
                //var workOrderElRow = $(this).closest('.x-grid3-row')[0];
                //var workOrderId = $(workOrderElRow).find('.x-grid3-col-LIST_RECORD_ID').text();

                //var workOrderElRow = $(this).closest('.x-grid3-row')[0];
                var eventId = $(el).find('.fc-content .popupPlaceHolder').attr('id');

                $('#eventOptionsRecordId').val(eventId);
                //$('#listViewOptionsModal').offset({ top: e.pageY, left: e.pageX }).show();
                //$('#listViewOptionsModal').css({ position: 'absolute', top: (e.pageY - e.layerX), left: (e.pageX - e.layerY) }).show();
                $('#eventOptionsModal').css({ position: 'absolute', top: (e.pageY - 110), left: e.pageX }).show();
                //$('#listViewOptionsModal').css({ position: 'absolute', top: (e.pageY), left: e.pageX }).show();
            });
        }

		function closeEventOptionsModal() {
			$('#eventOptionsModal').hide();
		}

        function filterCalendar() {
            newCalendarFilter = true;
            console.log('hello');
            $('#calendar').fullCalendar('refetchResources');
            //$('#calendar').fullCalendar('refetchEvents');
        }

        function fetchResources(callback) {
            console.log('what');
            $('#loaderModal').show();
            if (initialLoad || newCalendarFilter) {

                //if (initialLoad) {
                    //retrieveStoreIds();
                    initialLoad = false;
                //}

                newCalendarFilter = false;
                resourceIds = [];
                resourceList = [];
                resourceUserIds = [];
                resourceUserIdToIdMap = {};

                //if (!isIndividual && storeIds.length == 0) {
                if (!isIndividual && !storeFound) {
                    console.log('what\'s going on?');
                    callback([]);
                    $('#loaderModal').hide();
                    return;
                }

                //var resourceMap = {};
                var filters = 'Resource_Type__c != \'Scheduler\'';

                if (isIndividual) {
                    filters += ' AND RbA_User__c = \'' + currentUserId + '\'';
                }
                else {
                    //var storeIdsFilter = ' IN (\'' + storeIds.toString().replace(new RegExp(',', 'g'), '\', \'') + '\')';
                    var storeIdFilter = storeFound ? ' AND Retail_Location__c = \'' + $('#storeSelect').val() + '\'' : '';
                    var typeFilter = $('#calendarFilterSelect').val() == 'all' ? '' : ' AND Resource_Type__c = \'' + $('#calendarFilterSelect').val() + '\'';
                    //filters += typeFilter + ' AND Retail_Location__c' + storeIdsFilter;
                    filters += typeFilter + storeIdFilter;
                }

                console.log('new request');
                sforce.apex.execute(apexCalendarController, 'retrieveRecords', { objType: 'Resource', filters: filters }, processResourceResponse);
                callback([]);
            }
            else if ($('#calendar').fullCalendar('getView').name == 'timelineDay') {
                console.log('timeline Resources');
                callback(resourceList);
                $('#loaderModal').hide();
            }
            else {
                console.log('no resources');
                callback([]);
                $('#loaderModal').hide();
            }
        }

        function processResourceSuccess(response) {
            response = JSON.parse(response);
            console.log(response);

            if (response.success) {
                for (var i = 0, len = response.objList.length; i < len; i++) {
                    var record = response.objList[i];
                    var obj = buildResourceObject(record);
                    
                    resourceList.push(obj);
                    resourceIds.push(record.Id);
                    //storeMap[obj.storeId] = obj.store;

                    /*
                    if (storeIds.indexOf(obj.storeId) == -1) {
                        storeIds.push(obj.storeId);
                    }
                    */

                    if (obj.isUser) {
                        resourceUserIds.push(record.RbA_User__c);
                        resourceUserIdToIdMap[record.RbA_User__c] = record.Id;
                    }
                    
                    /*
                    if (resourceMap[obj.storeId] == null) {
                        resourceMap[obj.storeId] = { 
                            id: obj.storeId,
                            name: obj.store,
                            resources: [
                                {
                                    id: obj.id,
                                    name: obj.name,
                                    //isUser: obj.isUser,
                                    obj: obj
                                }
                            ]
                        };
                    }
                    else {
                        resourceMap[obj.storeId]['resources'].push(
                            {
                                id: obj.id,
                                name: obj.name,
                                //isUser: obj.isUser,
                                obj: obj
                            }
                        );
                    }
                    */
                }
            }
            /*
            else {
                handleError('MA_SchedulerCalendarComp : fetchResources' + apexCalendarController, response);
            }
            */

            $('#calendar').fullCalendar('refetchResources');
            $('#calendar').fullCalendar('refetchEvents');
            //$('#loaderModal').hide();
        }

        function buildResourceObject(record) {
            var obj = {
                id: record.Id,
                name: record.Name,
                resourceId: record.Id,
                isActive: record.Active__c,
                type: record.Resource_Type__c,
                storeId: record.Retail_Location__c,
                store: record.Retail_Location__r.Name,
                isUser: record.RbA_User__c != null && record.RbA_User__c != undefined,
                crewSize: record.Crew_Size__c != null && record.Crew_Size__c != undefined ? record.Crew_Size__c : 1
            };

            if (obj.isUser) {
                obj.name += ' (User)';
            }

            if (obj.crewSize > 1) {
                obj.name += ' (' + obj.crewSize + ' People)';
            }

            return obj;
        }
        
        function fetchResourceEvents(start, end, timezone, callback) {
            eventListToRender = getBusinessHours();
            if (resourceIds.length == 0) {
                callback([]);
                return;
            }
            
            end = new Date(end.add(2, 'days'));
            start = new Date(start.add(-2, 'days'));

            var timeWindowFilter = 'StartDateTime <= ' + end.toISOString() + ' AND EndDateTime >= ' + start.toISOString();
            var resourceIdsFilter = ' IN (\'' + resourceIds.toString().replace(new RegExp(',', 'g'), '\', \'') + '\')';
            var resourceUserIdsFilter = ' IN (\'' + resourceUserIds.toString().replace(new RegExp(',', 'g'), '\', \'') + '\')';
            var altFilters = timeWindowFilter + ' AND OwnerId' + resourceUserIdsFilter;
            var filters = timeWindowFilter.replace(new RegExp('DateTime', 'g'), 'DateTime__c') + ' AND Resource__c' + resourceIdsFilter;
            sforce.apex.execute(apexCalendarController, 'retrieveEvents', { objType: 'allEvents', filters: filters, altFilters: altFilters, resourceUserIdToIdMapString: JSON.stringify(resourceUserIdToIdMap) }, processEventsResponse);
        }
        
        function fetchWorkOrderEvents(start, end, timezone, callback) {
            if ($('#calendar').fullCalendar('getView') == 'agendaDay') {
                var dayResource = { 
                    id: start.toDateString(),
                    name: '',
                    resourceId: null,
                    type: '',
                    storeId: '',
                    store: '',
                    isUser: false,
                    crewSize: 1
                };

                $('#calendar').fullCalendar('addResource', dayResource);
            }

            eventListToRender = getBusinessHours();
            
            end = new Date(end.add(2, 'days'));
            start = new Date(start.add(-2, 'days'));

            var timeWindowFilter = 'Appointment_Date__c <= ' + end.format('Y-m-d') + ' AND Appointment_Date__c >= ' + start.format('Y-m-d');

            var calendarFilterMap = {
                'Tech Measure': 'Tech Measure',
                'Install Crew': 'Install',
                'Field Service': 'Service'
            }
            var typeFilter = $('#calendarFilterSelect').val() == 'all' ? '' : ' AND Work_Order_Type__c = \'' + calendarFilterMap[$('#calendarFilterSelect').val()] + '\'';
            var storeIdFilter = storeFound ? ' AND Account__r.Store_Location__r.Active_Store_Configuration__c = \'' + $('#storeSelect').val() + '\'' : '';
            
            var filters = timeWindowFilter + ' AND Appointment_Start_Time__c != NULL AND Appointment_End_Time__c != NULL' + typeFilter + storeIdFilter;
            sforce.apex.execute(apexCalendarController, 'retrieveEvents', { objType: 'WorkOrder', filters: filters, resourceUserIdToIdMapString: JSON.stringify({}) }, processEventsResponse);
        }

        function processEventsSuccess(response) {
            response = JSON.parse(response);
            console.log(response);
            
            if (response.success) {
                for (var i = 0, len = response.eventList.length; i < len; i++) {
                    var record = response.eventList[i];

                    eventListToRender.push({
                        id: record.workOrderId,
                        resourceId: record.resourceId,
                        title: record.title,
                        start: record.startDateTimeOffset,
                        end: record.endDateTimeOffset,
                        className: record.className,
                        url: record.url,
                        contactName: record.contactName,
                        eventType: record.eventType,
                        missingResource: record.missingResource
                    });
                }
            }

            $('#calendar').fullCalendar('refetchEvents');
            $('#loaderModal').hide();
        }
        
        function correctForTimezoneOffset(dt) {
            var epoch = Date.parse(dt);
            epoch = epoch + (dt.getTimezoneOffset() * 60 * 1000);
            return new Date(epoch);
        }

        function getBusinessHours() {
            var events = [];
            //if (storeIds.length == 1) {
            if (storeFound) {
                events.push({start: '00:00', end: '07:00', dow: [1,3,5], color: 'lightgray', rendering: 'background'});
                events.push({start: '15:00', end: '24:00', dow: [1,3,5], color: 'lightgray', rendering: 'background'});
                events.push({start: '00:00', end: '10:00', dow: [2,4], color: 'lightgray', rendering: 'background'});
                events.push({start: '19:00', end: '24:00', dow: [2,4], color: 'lightgray', rendering: 'background'});
                events.push({start: '00:00', end: '24:00', dow: [0,6], color: 'lightgray', rendering: 'background'});
            }
            return events;
        }
        
        function openCalendarLegend() {
            $( "#calendarLegendDrop" ).toggle();
        }
        
    </script>
    
    <div class="pad-0-10">
        <!--<div id="calendarLegend">-->
        <!--    <button id="calendarLegendTitle" onclick="openCalendarLegend();" class="ma-button ma-button--white dropdown-right">Legend<div class="dropdown-triangle-legend"></div></button>-->
        <!--    <div id="calendarLegendDrop" style="display:none;">-->
        <!--        <div>-->
        <!--            <div class="eventDot techmeasure"></div><span>Tech Measure</span>-->
        <!--        </div>-->
        <!--        <div>-->
        <!--            <div class="eventDot workOrderSynced"></div><span>Synced</span>-->
        <!--        </div>-->
        <!--        <div>-->
        <!--            <div class="eventDot missingResource" onclick=""></div><span>Unassigned</span>-->
        <!--        </div>-->
        <!--        <div>-->
        <!--            <div class="eventDot lswp"></div><span>LSWP</span>-->
        <!--        </div>-->
        <!--    </div>-->
        <!--</div>-->
        <div class="hideIndividual batch-assign-btn-container" id="optimize">
            <button class="ma-button ma-button--yellow" onclick="MAschedRoutes.showOptyModal();">Batch Assign</button>
        </div>

        <div id="storeSelectDiv" class="ma-form-control-wrap">
            <label class="ma-input-label">Store:</label>
            <div class="ma-form-control icon-right">
                <div class="dropdown-triangle"></div>
                <select id="storeSelect" onchange="setSettingsModal();" class="ma-input" />
            </div>
        </div>
        
        <div id="calendarFilter" class="ma-form-control-wrap">
            <label class="ma-input-label">Work Order Type:</label>
            <div class="ma-form-control icon-right">
            <div class="dropdown-triangle"></div>
            <select id="calendarFilterSelect" onchange="filterCalendar();" class="ma-input">
                <option value="all">Show All</option>
                <option value="Tech Measure">Tech Measure</option>
                <option value="Install Crew">Install Crew</option>
                <option value="Field Service">Field Service</option>
            </select>
            </div>
        </div>

        <div id="eventOptionsModal">
            <!-- <span class="ma-modal-close" onclick="closeListViewOptionsModal();"><img src="{!URLFOR($Resource.MA_Scheduler, '/images/close_60.png')}" /></span> -->
            <input type="hidden" id="eventOptionsRecordId" />
            <div onclick="viewEditWorkOrder(true); closeEventOptionsModal();">View / Edit</div>
            <div onclick="showAvailabilityModal(true); closeEventOptionsModal();">Reschedule</div>
            <div onclick="showAssignResourceModal(true); closeEventOptionsModal();">Reassign Resources</div>
            <div onclick="showCancellationModal(true); closeEventOptionsModal();">Cancel Work Order</div>
        </div>
        
        <div id="calendar"></div>
    </div>
</apex:component>