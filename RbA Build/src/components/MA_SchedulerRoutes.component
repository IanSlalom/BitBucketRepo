<apex:component controller="MA_RoutingSchedulerController" layout="none" >
    
    <apex:includeScript value="https://maps.googleapis.com/maps/api/js?client=gme-cloudbiltinc" />
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/overlappingmarkerspiderfier/oms.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/async/async.min.js')}"/>

    <script type='text/javascript'>

     $ = jQuery.noConflict();
        var MAschedRoutes = {
            SessionId: '{!$Api.Session_ID}',
            master : {},
            esriTravelModes : {},
            esriToken : '',
            options : {},
            batchResponse : {
                pendingBatch : {},
                editBatch : {}, 
                routes: {}
            },
            getAsyncRouting : function(options, callback) {
                $('#loaderModal').show();

                options = $.extend({
                    out_directions: false
                }, MAschedRoutes.options);

                $.ajax({
                    type: "POST",
                    url: MAschedRoutes.externalResources.arcGISAPIaysnc,
                    json: true,
                    data: {
                        f: 'json',
                        token: MAschedRoutes.master.token,
                        orders: JSON.stringify(MAschedRoutes.master.orders),
                        depots: JSON.stringify(MAschedRoutes.master.depots), 
                        routes: JSON.stringify(MAschedRoutes.master.routes),
                        default_date: MAschedRoutes.master.defaultdate,
                        travel_mode: MAschedRoutes.master.travelMode,
                        breaks: JSON.stringify(MAschedRoutes.master.breaks),
                        time_units: 'Minutes',
                        time_window_factor: 'High'
                    }
                })
                .done(function(data, success, body) {
                    try {
                        data = JSON.parse(data);
                        var error;
                        var routeResults;

                        if (data.error && data.error.code == 403) {
                            callback(true, data.error);
                        }
                        else {
                            MAschedRoutes.checkStatus(options, data, function(err, res) {
                                if (err) {
                                    callback(err, res);
                                }
                                else {
                                    callback(err, res);
                                }
                            });
                        }
                    }
                    catch(e) {
                        handleError('Scheduling Error','Unable to complete scheduling. ', e);
                        callback(true, {success:false, error: e, response: data});
                    }
                })
                .error(function(error) {
                    handleError('Scheduling Error','Unable to complete scheduling. ', e);
                    callback(true, {success:false, error: error});
                })
            },
            checkStatus : function(options, Sdata, callback) {
                $('#loaderModal').show();

                try {
                    var resultData;
                    async.until(
                        function () {
                            if (Sdata.jobStatus == "esriJobFailed") {
                                return Sdata.jobStatus == 'esriJobFailed';
                            }
                            else if (Sdata.jobStatus == "esriJobSucceeded") {
                                return Sdata.jobStatus == "esriJobSucceeded";
                            }
                            else if (Sdata.error && Sdata.error.code == 403) {
                                return Sdata.error.code == 403; 
                            }
                        }, 
                        function(callback) {
                            $.ajax({
                                type: "GET",
                                url: MAschedRoutes.externalResources.arcGISjobStatus.replace('<yourJobID>', Sdata.jobId).replace('<yourToken>', MAschedRoutes.master.token)
                                })
                                .done(function(data, success, body) {
                                    try {
                                        var RT;
                                        RT = JSON.parse(body.responseText);
                                        Sdata = RT;
                                        setTimeout(function(){
                                            callback(false, RT);
                                        }, 1000);
                                    }
                                    catch(e) {
                                        handleError('Scheduling Error','Unable to complete scheduling. ', e);
                                        callback(true, {success:false, error: e, response: data});
                                    }
                                }) 
                                .error(function(error, body) {
                                    callback(error, body);
                                })
                        },
                        function(err, res) {
                            if (Sdata.error && Sdata.error.code == 403) {
                                callback(true, {success: false, error: Sdata.error});
                            }
                            else if (res.jobStatus == 'esriJobSucceeded') {
                                async.series({
                                    solve_succeeded: function(callback) {
                                        MAschedRoutes.getResults(res.results.solve_succeeded.paramUrl, res.jobId, function(responseS) {
                                            if(!responseS.value){
                                                //callback(false, {success: false, error: responseS});
                                                callback(false, {success: false, error: 'The problem could not be solved'});
                                            }
                                            else{
                                                MAschedRoutes.batchResponse['solve_succeeded'] = responseS;
                                                callback(false, {success: true, response: responseS});
                                            }
                                        });
                                    },
                                    out_routes: function(callback) {
                                        MAschedRoutes.getResults(res.results.out_routes.paramUrl, res.jobId,function(responseR) {
                                            MAschedRoutes.processBatchRoutesSuccess({success: true, values: responseR.value.features});
                                            callback(false, {success: true});
                                        });
                                    },
                                    out_directions: function(callback) {
                                        if (options.out_directions){
                                            MAschedRoutes.getResults(res.results.out_directions.paramUrl, res.jobId, function(responseD) {
                                                callback(false, {success: true,  out_directions: true});
                                            });
                                        }
                                        else {
                                            callback(false, {success: true, out_directions: false});
                                        }
                                    },
                                    out_stops: function(callback) {
                                        MAschedRoutes.getResults(res.results.out_stops.paramUrl, res.jobId, function(responseOS) {
                                            MAschedRoutes.processBatchOrdersSuccess({success: true, pendingBatch: false, values: responseOS.value.features});
                                            callback(false, {success: true});
                                        });
                                    },
                                    out_unassigned_stops: function(callback) {
                                        MAschedRoutes.getResults(res.results.out_unassigned_stops.paramUrl, res.jobId, function(responseU) {
                                            MAschedRoutes.processUnassignedBatch({success: true, values: responseU.value.features});
                                            callback(false, {success: true});
                                        });
                                    }
                                },
                                function(err, results) {
                                    if (err) {
                                        callback(err, results);
                                    }
                                    else {
                                        callback(err, results);
                                    }
                                });
                            }
                            else {
                                callback(true, {success: false, error: res});
                            }
                        }
                    )
                }
                catch(e) {
                    handleError('Scheduling Error','Unable to complete scheduling. ', e);
                    callback(true, {success:false, error: e});
                }
            },
            getResults : function(Rdata, jobId, callback) {
                Rdata = Rdata.replace('results/', '');
                $.ajax({
                    type: "GET", 
                    url: MAschedRoutes.externalResources.arcGISoutputs.replace('<output_parameter_name>', Rdata).replace('<yourJobID>', jobId).replace('<yourToken>', MAschedRoutes.master.token)
                })
                .done(function(data, success, body) {
                    try {
                        var resultT = JSON.parse(body.responseText);
                        callback(resultT);
                    }
                    catch(e) {
                        handleError('Scheduling Error','Unable to complete scheduling. ', e);
                        callback(true, {success:false, error: e, response: data});
                    }
                })
                .error(function(error, body) {
                    callback(error, body);
                })
            },
            getScheduledRoutes : function(options, callback) {
                $('#loaderModal').show();

                if (options.success) {
                    if (MAschedRoutes.master.stops.features.length <= 1) {
                        var noStops = {
                            routes: {
                                features: []
                            },
                            stops: {
                                features: MAschedRoutes.master.stops.features
                            }
                        };

                        callback(false, {success: true, data: noStops});
                        return;
                    }

                    $.ajax({
                        type: "POST",
                        url: MAschedRoutes.externalResources.EsriRoutingAPI,
                        json: true,
                        data: {
                            f: 'json',
                            token: MAschedRoutes.master.token,
                            stops: JSON.stringify(MAschedRoutes.master.stops),
                            travelMode: MAschedRoutes.master.travelMode,
                            startTime: MAschedRoutes.master.defaultdate,
                            startTimeIsUTC: false, 
                            findBestSequence: false,
                            returnStops: true,
                            returnRoutes: true,
                            useTimeWindows : true
                        }
                    })
                    .done(function(data) {
                        try {
                            data = JSON.parse(data);

                            if (data.error) {
                                callback(true, {success: false, error: data.error});
                            }
                            else {
                                callback(false, {success: true, data: data});
                            }
                        }
                        catch(e) {
                            callback(true, {success: false, error: e});
                        }
                    })
                    .error(function(error) {
                        error = JSON.parse(error);
                        callback(true, {success: false, error:error});
                    })
                }
                else {
                    callback(true, {success: false, error: 'Unable to obtain token. Please check credentials'});
                }
            },
            getEsriToken : function(master, callback) {
                $('#loaderModal').show();

                var EsriToken;
                try {
                    var response = sforce.apex.execute('MA_RoutingSchedulerController', 'getESRIToken', { storeId: $('#storeSelect').val(), isVerification: false });
                    response = JSON.parse(response);

                    if (!response.error) {
                        EsriToken = response.access_token;
                        master['token'] = EsriToken;
                        MAschedRoutes.master = master;
                        MAschedRoutes.getEsriTravelMode(function(travelResponse){
                            MAschedRoutes.master['travelMode'] = travelResponse;
                            callback(false, {success:true});     
                        });
                    }
                    else {
                        handleError('Scheduling Error : Unable to get scheduling token.', response.error.message);
                        callback(true, {success:false, error: response.error.error});
                    }
                }
                catch(e) {
                    handleError('Scheduling Error : Unable to get scheduling token.', e);
                    callback(true, {success:false, error: e});
                }
            },
            getEsriTravelMode : function(callback) {
                if (!$.isEmptyObject(MAschedRoutes.esriTravelModes)) {
                    callback(MAschedRoutes.esriTravelModes.DrivingTime);
                }
                else {
                    $.ajax({
                        type: "GET",
                        url: MAschedRoutes.externalResources.arcGIStravel,
                        json: true,
                        data:{
                            f: 'json',
                            token: MAschedRoutes.master.token
                        }
                    })
                    .done(function(res) {
                        try {
                            var response = JSON.parse(res);
                            var results = response.results || [];
                            var ESRITravelModes = {};
                            var hasErrors = false;

                            for(var r = 0; r < results.length; r++) {
                                var result = results[r];
                                if(result.paramName && result.paramName == "supportedTravelModes") {
                                    if(result.value && result.value.features) {
                                        var features = result.value.features;
                                        for(var f = 0; f < features.length; f++) {
                                            var mode = features[f];

                                            try {
                                                ESRITravelModes[mode.attributes.Name.replace(/\s/g,'')] = JSON.parse(mode.attributes.TravelMode);
                                            }
                                            catch(e) {
                                                handleError('Unable to parse travel modes. Defaulting to Drive Time', e);
                                                callback({"attributeParameterValues":[{"parameterName":"Restriction Usage","attributeName":"Avoid Unpaved Roads","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Avoid Private Roads","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Driving an Automobile","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Through Traffic Prohibited","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Roads Under Construction Prohibited","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Gates","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Avoid Express Lanes","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Carpool Roads","value":"PROHIBITED"}],"description":"Models the movement of cars and other similar small automobiles, such as pickup trucks, and finds solutions that optimize travel time. Travel obeys one-way roads, avoids illegal turns, and follows other rules that are specific to cars. Dynamic travel speeds based on traffic are used where it is available when you specify a start time.","impedanceAttributeName":"TravelTime","simplificationToleranceUnits":"esriFeet","uturnAtJunctions":"esriNFSBAtDeadEndsAndIntersections","restrictionAttributeNames":["Avoid Carpool Roads","Avoid Express Lanes","Avoid Gates","Avoid Private Roads","Avoid Unpaved Roads","Driving an Automobile","Roads Under Construction Prohibited","Through Traffic Prohibited"],"useHierarchy":true,"simplificationTolerance":10,"timeAttributeName":"TravelTime","distanceAttributeName":"Miles","type":"AUTOMOBILE","id":"FEgifRtFndKNcJMJ","name":"Driving Time"});
                                            }
                                        }
                                    }

                                    break;
                                }
                            }

                            MAschedRoutes.esriTravelModes = ESRITravelModes;
                            callback(ESRITravelModes.DrivingTime);
                        }
                        catch(e) {
                            handleError('Unable to get travel modes. Defaulting to DrivingTime', e);
                            callback({"attributeParameterValues":[{"parameterName":"Restriction Usage","attributeName":"Avoid Unpaved Roads","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Avoid Private Roads","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Driving an Automobile","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Through Traffic Prohibited","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Roads Under Construction Prohibited","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Gates","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Avoid Express Lanes","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Carpool Roads","value":"PROHIBITED"}],"description":"Models the movement of cars and other similar small automobiles, such as pickup trucks, and finds solutions that optimize travel time. Travel obeys one-way roads, avoids illegal turns, and follows other rules that are specific to cars. Dynamic travel speeds based on traffic are used where it is available when you specify a start time.","impedanceAttributeName":"TravelTime","simplificationToleranceUnits":"esriFeet","uturnAtJunctions":"esriNFSBAtDeadEndsAndIntersections","restrictionAttributeNames":["Avoid Carpool Roads","Avoid Express Lanes","Avoid Gates","Avoid Private Roads","Avoid Unpaved Roads","Driving an Automobile","Roads Under Construction Prohibited","Through Traffic Prohibited"],"useHierarchy":true,"simplificationTolerance":10,"timeAttributeName":"TravelTime","distanceAttributeName":"Miles","type":"AUTOMOBILE","id":"FEgifRtFndKNcJMJ","name":"Driving Time"});
                        }
                    })
                    .error(function(res) {
                        handleError('Unable to get travel modes. Defaulting to DrivingTime', res);
                        callback({"attributeParameterValues":[{"parameterName":"Restriction Usage","attributeName":"Avoid Unpaved Roads","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Avoid Private Roads","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Driving an Automobile","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Through Traffic Prohibited","value":"AVOID_HIGH"},{"parameterName":"Restriction Usage","attributeName":"Roads Under Construction Prohibited","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Gates","value":"AVOID_MEDIUM"},{"parameterName":"Restriction Usage","attributeName":"Avoid Express Lanes","value":"PROHIBITED"},{"parameterName":"Restriction Usage","attributeName":"Avoid Carpool Roads","value":"PROHIBITED"}],"description":"Models the movement of cars and other similar small automobiles, such as pickup trucks, and finds solutions that optimize travel time. Travel obeys one-way roads, avoids illegal turns, and follows other rules that are specific to cars. Dynamic travel speeds based on traffic are used where it is available when you specify a start time.","impedanceAttributeName":"TravelTime","simplificationToleranceUnits":"esriFeet","uturnAtJunctions":"esriNFSBAtDeadEndsAndIntersections","restrictionAttributeNames":["Avoid Carpool Roads","Avoid Express Lanes","Avoid Gates","Avoid Private Roads","Avoid Unpaved Roads","Driving an Automobile","Roads Under Construction Prohibited","Through Traffic Prohibited"],"useHierarchy":true,"simplificationTolerance":10,"timeAttributeName":"TravelTime","distanceAttributeName":"Miles","type":"AUTOMOBILE","id":"FEgifRtFndKNcJMJ","name":"Driving Time"});
                    });
                }
            },
            startGeocoding : function() {
                $('#loaderModal').show();
                retrieveAccountsForGeocode($('#datepicker').val(), $('#storeSelect').val(), $('.batch-assign-wo-container .calendarFilterSelect').val(), null);
            },
            getRBAWorkOrders : function(callback) {
                $('#loaderModal').show();

                try {
                    var storeId = $('#storeSelect').val();
                    var dateString = moment($('#datepicker').val()).format('YYYY-MM-DD');

                    var tempTime = new Date($('#datepicker').val());
                    var offsetMinutes = tempTime.getTimezoneOffset();

                    var response = sforce.apex.execute('MA_RoutingSchedulerController', 'getRecords',{ dateString: dateString, storeId: storeId, workOrderType: $('.batch-assign-wo-container .calendarFilterSelect').val(), offsetPageMinutes: offsetMinutes });
                    response = JSON.parse(response);

                    if (!response.success) {
                        handleError('Error : getRBAWorkOrders', response);
                    }
                    else if (response.orders.features.length == 0) {
                        response['success'] = false;
                        response['error'] = 'No Work Orders found for selected criteria';
                        handleError('', response);
                    }
                    else if (response.routes.features.length == 0) {
                        response['success'] = false;
                        response['error'] = 'No Resources found for selected date';
                        handleError('', response);
                    }
                    else if (response.depots.features.length == 0) {
                        response['success'] = false;
                        response['error'] = 'No Store Address found';
                        handleError('', response);
                    }
                    
                    callback(!response.success, response);
                }
                catch(e) {
                    handleError('Error : getRBAWorkOrders', e);
                    callback(true, {success:false, error: e});
                }
            },
            processBatchRoutesSuccess : function(response) {
                try {
                    if (response.success) {
                        for (var i = 0, len = response.values.length; i < len; i++) {
                            var record = response.values[i];
                            record.attributes.Name = JSON.parse(record.attributes.Name);
                            var recordAttr = record.attributes;
                            MAschedRoutes.batchResponse.routes[recordAttr.Name.resId]= record;
                            MARoutesComp.master[recordAttr.Name.resId] = record;
                            
                            if (!MARoutesComp.master[recordAttr.Name.resId].hasOwnProperty('out_stops')) {
                                MARoutesComp.master[recordAttr.Name.resId]['out_stops'] = [];
                            }
                        }
                    }
                }
                catch(e) {
                    handleError('Error : processBatchRoutesSuccess', e);
                }
            },
            processBatchOrdersSuccess : function(response) {
                try {
                    var eventType = $('#calendarFilterSelect').val();
                    if (!response.pendingBatch) {
                        for (var i = 0, len = response.values.length; i < len; i++) {
                            var record = response.values[i].attributes;
                            if (record.Name != undefined && record.Name != null && record.Name != '') {

                                routeInfo = JSON.parse(record.RouteName);
                                var waitTime = record.WaitTime * 60 * 1000;

                                try {
                                    workOrderInfo = JSON.parse(record.Name) ;

                                    if (!workOrderInfo.storeID) {
                                        eventListToRender.push({
                                            id: workOrderInfo.woId,
                                            resourceId: routeInfo.resId,
                                            title: workOrderInfo.woName,
                                            start: moment(correctForTimezoneOffsetRouting(new Date(record.ArriveTime + waitTime), MAschedRoutes.master.offsetResponseMinutes)),
                                            end: moment(correctForTimezoneOffsetRouting(new Date(record.DepartTime), MAschedRoutes.master.offsetResponseMinutes)),
                                            className: 'maEvent',
                                            url: '/' + workOrderInfo.woId,
                                            contactName: workOrderInfo.contactName,
                                            eventType: workOrderInfo.woType,
                                            missingResource: false,
                                            resourceNamesText: '',
                                            city: workOrderInfo.city,
                                            state: workOrderInfo.state,
                                            isSynced: workOrderInfo.isSynced,
                                            isLswp: workOrderInfo.isLswp,
                                            isJip: workOrderInfo.isJip,
                                            multiDayOrder: workOrderInfo.multiDayOrder
                                        });
                                    }
                                }
                                catch(ex) {
                                    eventListToRender.push({
                                        id: record.Name + routeInfo.resId + record.ArriveTime,
                                        resourceId: routeInfo.resId,
                                        title: record.Name,
                                        start: moment(correctForTimezoneOffsetRouting(new Date(record.ArriveTime + waitTime), MAschedRoutes.master.offsetResponseMinutes)),
                                        end: moment(correctForTimezoneOffsetRouting(new Date(record.DepartTime), MAschedRoutes.master.offsetResponseMinutes)),
                                        className: 'personalEvent',
                                        eventType: 'personal',
                                        missingResource: false
                                    });
                                }
                            }
                        }
                    }

                    isPendingBatch = false;

                    $('#calendar').fullCalendar('refetchEvents');
                    $('#loaderModal').hide();
                    closeScheduleOptimizeModal();
                }
                catch(e) {
                    console.log(e);
                    handleError('Error : processBatchOrdersSuccess', e);
                }
            },
            processUnassignedBatch : function(unassigned) {
                $('#unassignedBatch').hide()
            },
            processBatchResults : function(options) {
                $('#loaderModal').show();

                if (options.accept) {
                    try {
                        var batchDateString;
                        var woToResIdsMap = {};
                        var primaryResourceMap = {};
                        var tempEventsList = $('#calendar').fullCalendar('clientEvents');
                        
                        for (var i = 0, len = tempEventsList.length; i < len; i++) {
                            var event = tempEventsList[i];

                            if (event.className.indexOf('maEvent') != -1 && event.className.indexOf('personal') == -1) {
                                if (woToResIdsMap[event.id] == undefined) {
                                    woToResIdsMap[event.id] = [event.resourceId];
                                }
                                else {
                                    var tempResourceList = woToResIdsMap[event.id];
                                    tempResourceList.push(event.resourceId);
                                    woToResIdsMap[event.id] = tempResourceList;
                                }

                                if (event.isPrimaryResource) {
                                    primaryResourceMap[event.id] = event.resourceId;
                                }
                            }
                        }

                        if (MAschedRoutes.master.defaultDate == undefined || MAschedRoutes.master.defaultDate == null) {
                            batchDateString = $('#datepicker').val();
                        }
                        else {
                            batchDateString = MAschedRoutes.master.defaultDate;
                        }

                        var response = sforce.apex.execute('MA_RoutingSchedulerController', 'processConfirmBatch', { woToResIdsMapString: JSON.stringify(woToResIdsMap), storeId: $('#storeSelect').val(), batchDateString: batchDateString, primaryResourceMapString: JSON.stringify(primaryResourceMap) });
                        response = JSON.parse(response);

                        if (response.success) {
                            hideResourceBatch({ batch: false });
                        }
                        else {
                            handleError('Error : processBatchResults', response.error);
                        }
                    }
                    catch(e) {
                        handleError('Error : processBatchResults', e);
                    }
                }
                else {
                    hideResourceBatch({ batch: false });
                }
            },
            showOptyModal : function(options) {
                MAschedRoutes.options = $.extend({
                    optimize: options.mainPage
                }, MAschedRoutes.options);

               $('#datepicker').datepicker({
                    inline: true,
                    dateFormat: 'yy-mm-dd',
                    onSelect: function(dateText, inst) {
                        var d = new Date(dateText);
                        var dOff = correctForTimezoneOffset(d);
                        $('#calendar').fullCalendar('gotoDate', d);
                    }
                });
                
                $('#scheduleOptimizeModal').show();
                $('#scheduleOptimizeModal').addClass('ma-open');
                $('#scheduleOptimizeOverlay').addClass('ma-in');
                $('body').css('overflow','hidden');
            },
            externalResources : {
                'arcGISAPI'           : 'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblemSync/GPServer/EditVehicleRoutingProblem/execute?',
                'arcGISAPIaysnc'      :'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblem/GPServer/SolveVehicleRoutingProblem/submitJob?',
                'arcGISjobStatus'     :'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblem/GPServer/SolveVehicleRoutingProblem/jobs/<yourJobID>?token=<yourToken>&returnMessages=true&f=json',
                'arcGIScancelJob'     : 'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblem/GPServer/SolveVehicleRoutingProblem/jobs/<yourJobID>/cancel?token=<yourToken>&f=json',
                'arcGISoutputs'       : 'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblem/GPServer/SolveVehicleRoutingProblem/jobs/<yourJobID>/results/<output_parameter_name>?token=<yourToken>&f=json',
                'arcGISinputs'        :'https://logistics.arcgis.com/arcgis/rest/services/World/VehicleRoutingProblem/GPServer/SolveVehicleRoutingProblem/jobs/<yourJobID>/inputs/<inputParameterName>?token=<yourToken>&f=json',
                'arcGIStravel'        : 'https://logistics.arcgis.com/arcgis/rest/services/World/Utilities/GPServer/GetTravelModes/execute?',
                'EsriRoutingAPI'      : 'https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World/solve',
                'Queue'                 : 'https://product-api-prod.cloudbilt.com/queue/'
            }
        }
       
        $(function () {
            $('.batchShow').hide();
        });
                    
        function getAutoSchedule() {
            isBatchResources = true;
            hideResourceBatch({ batch:isBatchResources, pendingBatch: false });

            if(MAschedRoutes.options.optimize) {
                var batchFilter = $('.batch-assign-wo-container .calendarFilterSelect').val();
                if (batchFilter == '' || batchFilter == undefined || batchFilter == null) {
                    handleError('NO WORK ORDER TYPE SELECTED', { error: 'A work order type must be selected before optimizing' });
                    return;
                }

                MAschedRoutes.startGeocoding();
            }
            else {
                MAschedRoutes.getRBAWorkOrders(function(res){})
                closeScheduleOptimizeModal();
                $('#loaderModal').hide();
                $('#optimize button').attr('disabled', false);
            }
        }
                    
        function getAutoScheduleGeocoded() {
            isBatchResources = true;
            if (MAschedRoutes.options.optimize) {
                async.waterfall([
                    MAschedRoutes.getRBAWorkOrders,
                    MAschedRoutes.getEsriToken,
                    MAschedRoutes.getAsyncRouting
                ], 
                function (err, result) {
                    if (err) {
                        hideResourceBatch({ batch: false });
                        if (result.code == 403) {
                             handleError('Batch Error : User does not have access to server. Check client Id & Secret. Unable to complete scheduling', result.message);
                        }
                        else if (!result.message && result.error && !result.error.message) {
                            handleError('', result);
                        }
                        else {
                            handleError('Batch Error : Unable to complete scheduling', result.message ? result.message : result.error.message);
                        }
                    }
                    else {
                        closeScheduleOptimizeModal();
                        $('#loaderModal').hide();
                        $('#optimize button').attr('disabled', false);
                    }
                });
            }
            else{
                MAschedRoutes.getRBAWorkOrders(function(res){})
                closeScheduleOptimizeModal();
                $('#loaderModal').hide();
                $('#optimize button').attr('disabled', false);
            }
        }
    
        function closeScheduleOptimizeModal() {
            $('#scheduleOptimizeModal').hide();
            $('#scheduleOptimizeOverlay').removeClass('ma-in');
            $('body').css('overflow','auto');
        }

        function hideResourceBatch(options){
            if(options.batch){
                goToResourceView();
                $('.batchShow').show();
                $('.batchHide').hide();
                $('#optimize button').attr('disabled', true);
                $('#scheduleOptimizeModal').hide();
                //$('#loaderModal').show();
            }
            else{
                isBatchResources = false;
                isPendingBatch = false;
                newCalendarFilter = true;
                $('.batchShow').hide();
                $('.batchHide').show();
                $('#calendar').fullCalendar('refetchResources');
                $('#optimize button').attr('disabled', false);
                $('#loaderModal').hide();
                goToResourceView();
            }
        }

        function correctForTimezoneOffsetRouting(dt, offsetMinutes) {
            if (offsetMinutes == undefined || offsetMinutes == null) {
                offsetMinutes = 0;
            }

            var epoch = Date.parse(dt);
            epoch = epoch - ((dt.getTimezoneOffset() - offsetMinutes) * 60 * 1000);
            return new Date(epoch);
        }
         
    </script>

    <div id="scheduleOptimizeModal">
        <div id="scheduleOptimizeContent">
            <div id="scheduleOptimize">
                <div id="scheduleOptimizeHeader">
                    <span>Optimize Schedule</span>
                    <span id="scheduleOptimizeModalClose" class="floatRight" onclick="closeScheduleOptimizeModal();"><img src="{!URLFOR($Resource.MA_Scheduler, '/images/close_60.png')}" /></span>
                </div>
                <div class="batch-assign-calendar-container">
                    <span>Select a date:</span>
                    <div id="datepicker"></div>
                </div>
                
                <div class="batch-assign-wo-container">
                    <label class="ma-input-label">Work Order Type:</label>
                    <div class="ma-form-control icon-right">
                        <div class="dropdown-triangle"></div> 
                        <select id="calendarFilterSelect" onchange="filterCalendar()" class="ma-input calendarFilterSelect">
                            <option value="">--None--</option>
                            <option value="Tech Measure">Tech Measure</option>
                            <option value="Field Service">Field Service</option>
                        </select>
                    </div>
                </div>
                
                <div id="scheduleOptimizeButtons">
                    <button class="ma-button ma-button--white" onclick="closeScheduleOptimizeModal();">Cancel</button>
                    <button class="ma-button ma-button--green" onclick="getAutoSchedule();">Optimize Schedule</button>
                </div>
            </div>
        </div>
    </div>
    <div id="scheduleOptimizeOverlay" class="batchShow"></div>
</apex:component>