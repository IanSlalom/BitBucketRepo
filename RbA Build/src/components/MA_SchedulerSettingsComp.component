<!--**********************************************************************************-->
<!--                                                                                  -->
<!--      This component is used to set a store's settings                            -->
<!--                                                                                  -->
<!--      @author     Daniel Taylor   (MapAnything)                                   -->
<!--                  Ethan Rush      (MapAnything)                                   -->
<!--                  Eric Osborne    (MapAnything)                                   -->
<!--                                                                                  -->
<!--      @version    6/29/2016   MapAnything                                         -->
<!--      Created                                                                     -->
<!--                                                                                  -->
<!--      @copyright (c)2016 MapAnything. All Rights Reserved.                        -->
<!--      Unauthorized use is prohibited                                              -->
<!--                                                                                  -->
<!--**********************************************************************************-->

<apex:component >
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/cupertino/jquery-ui.min.css')}" />
    
    <apex:includeScript value="/soap/ajax/34.0/connection.js" />
    <apex:includeScript value="/soap/ajax/34.0/apex.js" />

    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery-ui.min.js')}" />

    <style>
    	#settings {
    		display: block;
    	}

    	#settingsContent {
    		background-color: white;
    	}

        #settingsContent .timeDiv {
            display: inline-block;
            margin-right: 35px;
        }

    	#settingsContent .timeDiv select {
    		width: 100px;
    		margin-right: 5px;
    	}
    	
    	.settingsstoreHours {
            margin-left: 25px;
        }

    	.pointer {
    		cursor: pointer;
    	}

    	.red {
    		color: red;
    	}

    	.blue {
    		color: blue;
    	}

    	.innerSettingsGroup span, .innerSettingsGroup .ma-form-control, .settingsBookingWindows .ma-form-control {
    		margin: 5px 0px;
    	}

        #gearIcon img {
            height: 15px;
            cursor: pointer;
        }
        
        .ui-widget input, .ui-widget select, .ui-widget textarea, .ui-widget button {
            font-family: Salesforce Sans, Helvetica,Arial,sans-serif;
            font-size: 1em;
        }
        
        span.pointer.expandSettingsRow {
            padding: 0px 3px;
        }
        
        .background-gray {
            background-color: #f4f6f9;
        }

        #settingsModal #showEsriLink, #settingsModal #hideEsriLink {
            font-size: 8px;
            color: lightblue;
            cursor: pointer;
        }
        
    </style>
    
	<script>
    	var tabs;
        var timeOptions = '';
        var storeSettingsMap = {};
		var apexSettingsController = 'MA_SchedulerController';
        var resourceTypes = [ 'Tech Measure', 'Install', 'Service' ];
        var verifyEsriResponse = { onSuccess: verifyEsriSuccess, onFailure: processResponseError };
		var daysOfWeek = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];
        var processSettingsResponse = { onSuccess: processSettingsSuccess, onFailure: processResponseError };
        var processSaveSettingsResponse = { onSuccess: processSaveSettingsSuccess, onFailure: processResponseError };

    	$(function() {
	    	sforce.connection.sessionId = '{!$Api.Session_Id}';

	    	$('#newHolidayExceptionDate').datepicker();

            var times = [];

            for (var i = 0, len = 12; i < len; i++) {
                var hour = i == 0 ? 12 : i;
                times.push(hour+':00');
                times.push(hour+':30');
            }

            for (var i = 0, len = times.length; i < len; i++) {
                timeOptions += '<option value="' + times[i] + '">' + times[i] + '</option>';
            }

            /****************************************************************/
            /*                                                              */
            /*      fills in the base html for each resource type           */
            /*                                                              */
            /****************************************************************/
            for (var i = 0, len = resourceTypes.length; i < len; i++) {
                var resourceTypeNoSpaces = resourceTypes[i].replace(new RegExp(' ', 'g'), '');
                var resourceDivId = resourceTypeNoSpaces + 'Settings';

                $('#tabs ul').append('<li><a href="#' + resourceDivId + '">' + resourceTypes[i] + '</a></li>');

                var resourceTypeSettingsDivHtml = '<div id="' + resourceDivId + '" name="' + resourceTypes[i] + '" class="tabDiv ma-jquery-tab-content-override">'
                                                    + '<div class="innerSettingsGroup">'
                                                        + '<h2><span>Set specific time slots</span></h2>'
                                                        + '<div class="pad-0-15"><p>Set timeslots that will appear as available blocks to start appointments in. The end of the last timeslot should represent the end of the working day (when technicians stop working).</p></div>'
                                                    + '</div>'
                                                + '</div>';
                $('#tabs').append(resourceTypeSettingsDivHtml);

                for (var x = 0, daysOfWeekLen = daysOfWeek.length; x < daysOfWeekLen; x++) {
                    var bookingWindowGroupHtml = '<div class="bookingWindowGroup">'
                                                    + '<h4><span class="pointer expandSettingsRow" onclick="showHideWindows(this);">+</span><span class="dayOfWeek">' + daysOfWeek[x] + '</span></h4>'
                                                    + '<div id="' + daysOfWeek[x] + 'Windows" class="settingsBookingWindows">'
                                                        + '<div class="blue pointer addHours" onclick="addSettingsBookingWindowRow(this);">Add New Time Slot</div>'
                                                    + '</div>'
                                                + '</div>';
                    $('#' + resourceDivId + ' .innerSettingsGroup').append(bookingWindowGroupHtml);
                }
            }

            for (var i = 0, len = daysOfWeek.length; i < len; i++) {
                var storeHoursGroupHtml = '<div class="storeHoursGroup">'
                                            + '<h4><span class="dayOfWeek">' + daysOfWeek[i] + '</span></h4>'
                                            + '<div id="' + daysOfWeek[i] + 'Hours" class="settingsstoreHours">'
                                                + '<div class="blue pointer addHours" onclick="addSettingsHoursRow(this, \'store\');">Add Store Hours</div>'
                                            + '</div>'
                                        + '</div>';
                $('#storeSettingsTab #storeHours.innerSettingsGroup').append(storeHoursGroupHtml);
            }

            tabs = $('#tabs').tabs({});
    	});

        /****************************************************************/
        /*                                                              */
        /*      this method opens the settings modal                    */
        /*                                                              */
        /****************************************************************/
        function openSettingsModal() {
            $('#loarderModal, .addHours, #listView').show();
            $('.esri-verify-fail, .esri-verify-success').hide();
            $('.expandSettingsRow').text('+');
            $('.settingsBookingWindows, #newHolidaySelectionModal').hide();
            $('.storeHoursInnerGroup, .bookingWindowsInnerGroup, .holidayRow, .removableSettingsRow').remove();
            $('.listViewportWrapper .refreshListButton').click();
            $('li a[href="#storeSettingsTab"]').click();
            $('body').css('overflow-y', 'hidden');

            setTimeout(function(){
                $('.main-nav-container').hide();
                $('.nav-overlay-container').hide();
            }, 100);

            sforce.apex.execute(apexSettingsController, 'retrieveSettings', { storeId: $('#storeSelect').val() }, processSettingsResponse);
        }

        /****************************************************************/
        /*                                                              */
        /*      this method retrieves the prior settings                */
        /*      and populates the settings modal                        */
        /*                                                              */
        /****************************************************************/
        function processSettingsSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
            	var settingsRecord = response.storeSettings;

            	if (settingsRecord != undefined && settingsRecord != null) {
	                var jsonSettings = settingsRecord.Settings__c;
	                jsonSettings = JSON.parse(jsonSettings);

	                $('#storeSettingsId').val(settingsRecord.Id);
                	$('#timezoneOptions').val(jsonSettings['timezone']);
                    $('#storeSettingsEsri #esriClientId').val(jsonSettings['esriClientId']);
                    $('#storeSettingsEsri #esriClientSecret').val(jsonSettings['esriClientSecret']);

                    if (jsonSettings['esriClientSecretVerified'] == true) {
                        $('.esri-verify-success').show();
                    }

                    if (response.showEsriCredentials) {
                        $('.esriCredentials').show();
                    }
                    else {
                        $('.esriCredentials').hide();
                    }

                    toggleEsriCredentialsVisibility($('#hideEsriLink'));

                	/****************************************************************/
                    /*                                                              */
                    /*      populates the store hours section                       */
                    /*                                                              */
                    /****************************************************************/
                    var storeHours = jsonSettings['storeHours'];
                	if (storeHours != undefined && storeHours != null) {
	                	for (var dayOfWeek in storeHours) {
	                		var el = $('#' + dayOfWeek + 'Hours .addHours');
	                		var hoursObj = storeHours[dayOfWeek][0];
	                		addSettingsHoursRow(el, 'store', hoursObj);
	                	}
	                }

                	/****************************************************************/
                    /*                                                              */
                    /*      populates the resource types hours sections             */
                    /*                                                              */
                    /****************************************************************/
                    for (var x = 0, resourceTypesLen = resourceTypes.length; x < resourceTypesLen; x++) {
                		var resourceType = resourceTypes[x];
                		var resourceTypeSettings = jsonSettings[resourceType];

                		if (resourceTypeSettings != undefined && resourceTypeSettings != null) {
		                	var bookingWindowsHours = resourceTypeSettings['bookingWindows'];

		                	for (var dayOfWeek in bookingWindowsHours) {
		                		var bookingWindowsDay = bookingWindowsHours[dayOfWeek];

		                		$('.tabDiv[name="' + resourceType + '"] #' + dayOfWeek + 'Windows').closest('.bookingWindowGroup').find('.expandSettingsRow').click();

		                		for (var i = 0, len = bookingWindowsDay.length; i < len; i++) {
			                		var el = $('.tabDiv[name="' + resourceType + '"] #' + dayOfWeek + 'Windows .addHours');
			                		var windowsObj = bookingWindowsDay[i];
									addSettingsBookingWindowRow(el, windowsObj);
			                	}
		                	}
		                }
	                }

	                /****************************************************************/
                    /*                                                              */
                    /*      populates the store holidays section                    */
                    /*                                                              */
                    /****************************************************************/
                    var storeHolidays = jsonSettings['storeHolidays'];
		            if (storeHolidays != undefined && storeHolidays != null) {
		            	for (var i = 0, len = storeHolidays.length; i < len; i++) {
			            	var holiday = storeHolidays[i];
			            	addHolidayException(holiday);
			            }
		            }
                }

                /****************************************************************/
                /*                                                              */
                /*      populates the resource hours table                      */
                /*                                                              */
                /****************************************************************/
                if (response.resourceList) {
	                for (var i = 0, len = response.resourceList.length; i < len; i++) {
	                    resource = response.resourceList[i];

		                if (resource != undefined && resource != null) {
				        	var resourcesSettingsTableHtml = '<tr class="removableSettingsRow">'
																+ '<td class="resourceSettingsNameCol">'
																	+ '<div class="pointer closed" onclick="toggleExpandResourceSettings(this);"></div>'
																	+ ' ' + resource.Name
																+ '</td>'
																+ '<td>'
																	+ resource.Resource_Type__c
																+ '</td>'
																+ '<td class="SundayResourceHoursCol"></td>'
																+ '<td class="MondayResourceHoursCol"></td>'
																+ '<td class="TuesdayResourceHoursCol"></td>'
																+ '<td class="WednesdayResourceHoursCol"></td>'
																+ '<td class="ThursdayResourceHoursCol"></td>'
																+ '<td class="FridayResourceHoursCol"></td>'
																+ '<td colspan="2" class="SaturdayResourceHoursCol"></td>'
															+ '</tr>'
															+ '<tr class="removableSettingsRow hiddenRow">'
																+ '<td colspan="10" id="' + resource.Id + 'ResourceHours" resource-id="' + resource.Id + '"></td>'
															+ '</tr>';

							$('#resourcesSettingsTable').append(resourcesSettingsTableHtml);
							var resourceEl = $('#resourcesSettingsTable #' + resource.Id + 'ResourceHours');

			                for (var x = 0, daysOfWeekLen = daysOfWeek.length; x < daysOfWeekLen; x++) {
				                var resourceSettingsGroupHtml = '<div class="resourceHoursGroup">'
						                                            + '<h4><span class="dayOfWeek">' + daysOfWeek[x] + '</span></h4>'
						                                            + '<div id="' + daysOfWeek[x] + 'ResourceHours" class="settingsresourceHours">'
						                                                + '<div class="blue pointer addHours" onclick="addSettingsHoursRow(this, \'resource\');">Add Resource Hours</div>'
						                                            + '</div>'
						                                        + '</div>';
				                $(resourceEl).append(resourceSettingsGroupHtml);
				            }

				            if (response.resourceSettingsMap[resource.Id]) {
				            	settingsRecord = response.resourceSettingsMap[resource.Id];
				            	if (settingsRecord != undefined && settingsRecord != null) {
					                jsonSettings = settingsRecord.Settings__c;
					                jsonSettings = JSON.parse(jsonSettings);

					                $(resourceEl).attr('settings-id', settingsRecord.Id);

				                	var resourceHours = jsonSettings['resourceHours'];
				                	if (resourceHours != undefined && resourceHours != null) {
					                	for (var dayOfWeek in resourceHours) {
					                		var el = $(resourceEl).find('#' + dayOfWeek + 'ResourceHours .addHours');
					                		var hoursObj = resourceHours[dayOfWeek][0];
					                		addSettingsHoursRow(el, 'resource', hoursObj);
					                	}
					                }
					            }
				            }

							$('#resourcesSettingsTable .hiddenRow').hide();
		                }
	                }
	            }

                $('#settingsModal').show();
                $('#loaderModal').hide();
            }
            else {
                handleError('MA_SchedulerSettingsComp : openSettingsModal', response);
            }
        }

		/****************************************************************/
        /*                                                              */
        /*      this method shows/hides the more detailed resource      */
        /*      row in the resource hours table                         */
        /*                                                              */
        /****************************************************************/
        function toggleExpandResourceSettings(el) {
			if ($(el).hasClass('closed')) {
				$(el).closest('tr').next().show();
				$(el).removeClass('closed').addClass('open');
			}
			else {
				$(el).closest('tr').next().hide();
				$(el).removeClass('open').addClass('closed');
			}
		}

        /****************************************************************/
        /*                                                              */
        /*      this method saves the store's settings as a JSON string */
        /*                                                              */
        /****************************************************************/
        function saveSettings() {
            $('#loaderModal').show();

            var settings = [];

            var jsonSettings = {
                timezone: $('#timezoneOptions').val(),
                esriClientId: $('#storeSettingsEsri #esriClientId').val(),
                esriClientSecret: $('#storeSettingsEsri #esriClientSecret').val(),
                esriClientSecretVerified: $('.esri-verify-success').is(':visible')
            };

            /****************************************************************/
            /*                                                              */
            /*      formats the store's hours as JSON                       */
            /*                                                              */
            /****************************************************************/
            var storeHoursRowsPopulated = $('#storeHours .storeHoursGroup .timeDiv');
            if (storeHoursRowsPopulated.length > 0) {
                var storeHours = {};
                var storeHoursRows = $('#storeHours .storeHoursGroup');
                for (var i = 0, len = storeHoursRows.length; i < len; i++) {
                    var storeHoursGroup = $(storeHoursRows[i]);
                    if ($(storeHoursGroup).find('.timeDiv').length > 0) {
                        var dayOfWeekEl = $(storeHoursGroup).find('.dayOfWeek')[0];
                        var dayOfWeek = $(dayOfWeekEl).text();

                        var storeHoursStart = $(storeHoursGroup).find('.startTime').val();
                        var storeHoursStartAmPm = $(storeHoursGroup).find('input[type="radio"][name="store' + dayOfWeek + 'StartTime"]:checked').val();
                        var storeHoursStartSplit = storeHoursStart.split(':');
                        var storeHoursStartHour = storeHoursStartSplit[0];

                        if (storeHoursStartHour == '12') {
                        	storeHoursStartHour = '00';
                        }
                        else if (storeHoursStartHour.length == 1) {
                        	storeHoursStartHour = '0' + storeHoursStartHour;
                        }

                        if (storeHoursStartAmPm.toLowerCase() == 'pm') {
                        	storeHoursStartHour = parseInt(storeHoursStartHour) + 12;
                        }

                        storeHoursStart = storeHoursStartHour + ':' + storeHoursStartSplit[1];

                        var storeHoursEnd = $(storeHoursGroup).find('.endTime').val();
                        var storeHoursEndAmPm = $(storeHoursGroup).find('input[type="radio"][name="store' + dayOfWeek + 'EndTime"]:checked').val();
                        var storeHoursEndSplit = storeHoursEnd.split(':');
                        var storeHoursEndHour = storeHoursEndSplit[0];

                        if (storeHoursEndHour == '12') {
                        	storeHoursEndHour = '00';
                        }
                        else if (storeHoursEndHour.length == 1) {
                        	storeHoursEndHour = '0' + storeHoursEndHour;
                        }

                        if (storeHoursEndAmPm.toLowerCase() == 'pm') {
                        	storeHoursEndHour = parseInt(storeHoursEndHour) + 12;
                        }

                        storeHoursEnd = storeHoursEndHour + ':' + storeHoursEndSplit[1];

                        storeHours[dayOfWeek] = [
                            { 'start': storeHoursStart, 'end': storeHoursEnd }
                        ];
                    }
                }

                if (!$.isEmptyObject(storeHours)) {
                    jsonSettings['storeHours'] = storeHours;
                }
            }

            /****************************************************************/
            /*                                                              */
            /*      formats the resource types hours as JSON                */
            /*                                                              */
            /****************************************************************/
            for (var x = 0, resourceTypeLen = resourceTypes.length; x < resourceTypeLen; x++) {
                var resourceType = resourceTypes[x];
                var tabDiv = $('.tabDiv[name="' + resourceType + '"]');

                if (tabDiv != null && tabDiv != undefined) {
                	var tabDivName = $(tabDiv).attr('name');
                    var bookingWindowsRowsPopulated = $(tabDiv).find('.bookingWindowGroup .timeDiv');

                    if (bookingWindowsRowsPopulated.length > 0) {
                        var bookingWindowHours = {};
                        var bookingWindowsRows = $(tabDiv).find('.bookingWindowGroup');

                        for (var i = 0, len = bookingWindowsRows.length; i < len; i++) {
                            var bookingWindowGroup = $(bookingWindowsRows[i]);
                        	var dayOfWeekEl = $(bookingWindowGroup).find('.dayOfWeek')[0]
                            var dayOfWeek = $(dayOfWeekEl).text();

                            if ($(bookingWindowGroup).find('.timeDiv').length > 0) {
                            	var bookingWindowGroupInnerRows = $(bookingWindowGroup).find('.bookingWindowsInnerGroup');

                            	for (var z = 0, innerRowsLen = bookingWindowGroupInnerRows.length; z < innerRowsLen; z++) {
                            		var innerBookingWindowRow = $(bookingWindowGroupInnerRows[z]);
                            		var lastRowRadio = $(innerBookingWindowRow).find('input[type="radio"]:last')[0];
                                	var settingsRowNum = $(lastRowRadio).attr('name').split('EndTime')[1];

	                                var bookingWindowHoursStart = $(innerBookingWindowRow).find('.startTime').val();
	                                var bookingWindowHoursEnd = $(innerBookingWindowRow).find('.endTime').val();
	                                
	                                var bookingWindowHoursStart = $(innerBookingWindowRow).find('.startTime').val();
			                        var bookingWindowHoursStartAmPm = $(innerBookingWindowRow).find('input[type="radio"][name="' + tabDivName + dayOfWeek + 'StartTime' + settingsRowNum + '"]:checked').val();
			                        var bookingWindowHoursStartSplit = bookingWindowHoursStart.split(':');
			                        var bookingWindowHoursStartHour = bookingWindowHoursStartSplit[0];

			                        if (bookingWindowHoursStartHour == '12') {
			                        	bookingWindowHoursStartHour = '00';
			                        }
			                        else if (bookingWindowHoursStartHour.length == 1) {
			                        	bookingWindowHoursStartHour = '0' + bookingWindowHoursStartHour;
			                        }

			                        if (bookingWindowHoursStartAmPm.toLowerCase() == 'pm') {
			                        	bookingWindowHoursStartHour = parseInt(bookingWindowHoursStartHour) + 12;
			                        }

			                        bookingWindowHoursStart = bookingWindowHoursStartHour + ':' + bookingWindowHoursStartSplit[1];

			                        var bookingWindowHoursEnd = $(innerBookingWindowRow).find('.endTime').val();
			                        var bookingWindowHoursEndAmPm = $(innerBookingWindowRow).find('input[type="radio"][name="' + tabDivName + dayOfWeek + 'EndTime' + settingsRowNum + '"]:checked').val();
			                        var bookingWindowHoursEndSplit = bookingWindowHoursEnd.split(':');
			                        var bookingWindowHoursEndHour = bookingWindowHoursEndSplit[0];

			                        if (bookingWindowHoursEndHour == '12') {
			                        	bookingWindowHoursEndHour = '00';
			                        }
			                        else if (bookingWindowHoursEndHour.length == 1) {
			                        	bookingWindowHoursEndHour = '0' + bookingWindowHoursEndHour;
			                        }

			                        if (bookingWindowHoursEndAmPm.toLowerCase() == 'pm') {
			                        	bookingWindowHoursEndHour = parseInt(bookingWindowHoursEndHour) + 12;
			                        }

			                        bookingWindowHoursEnd = bookingWindowHoursEndHour + ':' + bookingWindowHoursEndSplit[1];

                        			if (bookingWindowHours[dayOfWeek] == undefined) {
	                                    bookingWindowHours[dayOfWeek] = [
	                                        { 'start': bookingWindowHoursStart, 'end': bookingWindowHoursEnd }
	                                    ];
	                                }
	                                else {
	                                    var tempBookingWindows = bookingWindowHours[dayOfWeek];

	                                    tempBookingWindows.push({ 'start': bookingWindowHoursStart, 'end': bookingWindowHoursEnd });
	                                    bookingWindowHours[dayOfWeek] = tempBookingWindows;
	                                }
                            	}

                            	var tempBookingWindows = [];
                            	var dayOfWeekWindows = bookingWindowHours[dayOfWeek];
                            	for (var z = 0, windowsLen = dayOfWeekWindows.length; z < windowsLen; z++) {
                            		var currentWindow = dayOfWeekWindows[z];
                        			var windowAdded = false;

                        			for (var n = 0, tempLen = tempBookingWindows.length; n < tempLen; n++) {
                        				var currentWindowStartTime = createNumForTimeSlotSorting(currentWindow['start']);
                        				var tempStartTime = createNumForTimeSlotSorting(tempBookingWindows[n]['start']);
                        				
                        				if (currentWindowStartTime == tempStartTime) {
                            				var currentWindowEndTime = createNumForTimeSlotSorting(currentWindow['end']);
                            				var tempEndTime = createNumForTimeSlotSorting(tempBookingWindows[n]['end']);

                        					if (currentWindowEndTime <= tempEndTime) {
                            					tempBookingWindows.splice(n, 0, currentWindow);
                            					windowAdded = true;
                            					break;
                            				}
                        				}
                        				else if (currentWindowStartTime < tempStartTime) {
                        					tempBookingWindows.splice(n, 0, currentWindow);
                        					windowAdded = true;
                        					break;
                        				}
                        			}

                        			if (!windowAdded) {
                        				tempBookingWindows.push(currentWindow);
                        			}
                            	}

                            	bookingWindowHours[dayOfWeek] = tempBookingWindows;
                            }
                        }

                        if (!$.isEmptyObject(bookingWindowHours)) {
                            if (jsonSettings[resourceType] == undefined) {
                                jsonSettings[resourceType] = {};
                            }
                            jsonSettings[resourceType]['bookingWindows'] = bookingWindowHours;
                        }
                    }
                }
            }

            /****************************************************************/
            /*                                                              */
            /*      formats the store holidays as JSON                      */
            /*                                                              */
            /****************************************************************/
            var storeHolidaysArray = [];
            var storeHolidays = $('#storeSettingsHolidayTable .holidayRow');
            for (var i = 0, len = storeHolidays.length; i < len; i++) {
            	var holiday = storeHolidays[i];
            	var holidayDate = $(holiday).find('.holidayDate').text();
            	var holidayReason = $(holiday).find('.holidayReason').text();
            	var holidayDayOfWeek = $(holiday).find('.holidayDayOfWeek').text();

            	storeHolidaysArray.push({ date: holidayDate, reason: holidayReason, dayOfWeek: holidayDayOfWeek });
            }

        	var tempholidays = [];
        	for (var i = 0, len = storeHolidaysArray.length; i < len; i++) {
        		var currentHoliday = storeHolidaysArray[i];
    			var dateAdded = false;

    			for (var n = 0, tempLen = tempholidays.length; n < tempLen; n++) {
    				var currentDate = Date.parse(currentHoliday['date']);
    				var tempdate = Date.parse(tempholidays[n]['date']);
    				
    				if (currentDate <= tempdate) {
    					tempholidays.splice(n, 0, currentHoliday);
    					dateAdded = true;
    					break;
    				}
    			}

    			if (!dateAdded) {
    				tempholidays.push(currentHoliday);
    			}
        	}

        	storeHolidaysArray = tempholidays;
			jsonSettings['storeHolidays'] = storeHolidaysArray;

            var storeSettingsId = $('#storeSettingsId').val();
            if (storeSettingsId == undefined || storeSettingsId == '') {
                storeSettingsId = null;
            }

			settings.push({ Id: storeSettingsId, Store_Id__c: $('#storeSelect').val(), Resource_Id__c: null, Settings__c: JSON.stringify(jsonSettings) });

			/****************************************************************/
            /*                                                              */
            /*      formats the resource's hours as JSON                    */
            /*                                                              */
            /****************************************************************/
            var resourceHoursPopulated = $('#resourcesSettingsTable .resourceHoursGroup .timeDiv');
			if (resourceHoursPopulated.length > 0) {
				var resourceRows = $('#resourcesSettingsTable .hiddenRow:has(".timeDiv")');
				for (var x = 0, resourceLen = resourceRows.length; x < resourceLen; x++) {
					var jsonSettings = {};
					var resourceHours = {};
	                var resourceHoursRows = $(resourceRows[x]).find('.resourceHoursGroup');
	                var resourceId = $(resourceHoursRows[0]).closest('td').attr('resource-id');

	                for (var i = 0, len = resourceHoursRows.length; i < len; i++) {
	                	var resourceHoursGroup = $(resourceHoursRows[i]);
	                    if ($(resourceHoursGroup).find('.timeDiv').length > 0) {
	                        var dayOfWeekEl = $(resourceHoursGroup).find('.dayOfWeek')[0];
	                        var dayOfWeek = $(dayOfWeekEl).text();

	                        var resourceHoursStart = $(resourceHoursGroup).find('.startTime').val();
	                        var resourceHoursStartAmPm = $(resourceHoursGroup).find('input[type="radio"][name="resource' + resourceId + dayOfWeek + 'StartTime"]:checked').val();
	                        var resourceHoursStartSplit = resourceHoursStart.split(':');
	                        var resourceHoursStartHour = resourceHoursStartSplit[0];

	                        if (resourceHoursStartHour == '12') {
	                        	resourceHoursStartHour = '00';
	                        }
	                        else if (resourceHoursStartHour.length == 1) {
	                        	resourceHoursStartHour = '0' + resourceHoursStartHour;
	                        }

	                        if (resourceHoursStartAmPm.toLowerCase() == 'pm') {
	                        	resourceHoursStartHour = parseInt(resourceHoursStartHour) + 12;
	                        }

	                        resourceHoursStart = resourceHoursStartHour + ':' + resourceHoursStartSplit[1];

	                        var resourceHoursEnd = $(resourceHoursGroup).find('.endTime').val();
	                        var resourceHoursEndAmPm = $(resourceHoursGroup).find('input[type="radio"][name="resource' + resourceId + dayOfWeek + 'EndTime"]:checked').val();
	                        var resourceHoursEndSplit = resourceHoursEnd.split(':');
	                        var resourceHoursEndHour = resourceHoursEndSplit[0];

	                        if (resourceHoursEndHour == '12') {
	                        	resourceHoursEndHour = '00';
	                        }
	                        else if (resourceHoursEndHour.length == 1) {
	                        	resourceHoursEndHour = '0' + resourceHoursEndHour;
	                        }

	                        if (resourceHoursEndAmPm.toLowerCase() == 'pm') {
	                        	resourceHoursEndHour = parseInt(resourceHoursEndHour) + 12;
	                        }

	                        resourceHoursEnd = resourceHoursEndHour + ':' + resourceHoursEndSplit[1];

	                        resourceHours[dayOfWeek] = [
	                            { 'start': resourceHoursStart, 'end': resourceHoursEnd }
	                        ];
	                    }
					}

	                if (!$.isEmptyObject(resourceHours)) {
	                    jsonSettings['resourceHours'] = resourceHours;

                        var resourceSettingsId = $(resourceHoursRows[0]).closest('td').attr('settings-id');
                        if (resourceSettingsId == undefined || resourceSettingsId == '') {
                            resourceSettingsId = null;
                        }

	                    settings.push({ Id: resourceSettingsId, Store_Id__c: $('#storeSelect').val(), Resource_Id__c: resourceId, Settings__c: JSON.stringify(jsonSettings) });
	                }
				}
			}

            sforce.apex.execute(apexSettingsController, 'saveSettings', { jsonSettings: JSON.stringify(settings) }, processSaveSettingsResponse);
        }

        /****************************************************************/
        /*                                                              */
        /*  this method converts time strings to numbers for sorting    */
        /*                                                              */
        /****************************************************************/
        function createNumForTimeSlotSorting(timeString) {
        	var tempTime = parseInt(timeString.replace(':', '').replace(' am', '').replace(' pm', ''));

        	if (tempTime == 12) {
        		tempTime = 0;
        	}

        	if (timeString.indexOf(' pm') != -1) {
        		tempTime += 12;
        	}

        	return tempTime;
        }

        /****************************************************************/
        /*                                                              */
        /*      this method process the settings save result            */
        /*                                                              */
        /****************************************************************/
        function processSaveSettingsSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
                closeSettingsModal();
            }
            else {
                handleError('MA_SchedulerSettingsComp : saveSettings', response);
            }
        }

        /****************************************************************/
        /*                                                              */
        /*      this method closes the settings modal                   */
        /*                                                              */
        /****************************************************************/
        function closeSettingsModal() {
            $('#storeSettingsId, #timezoneOptions, #storeSettingsEsri #esriClientId, #storeSettingsEsri #esriClientSecret').val('');
            $('#settingsModal, .esriCredentials, .esriCredentialsInputs').hide();
            toggleEsriCredentialsVisibility($('#hideEsriLink'));
            $('.esriCredentialsInputs .ma-input').attr('disabled', true);
            $('body').css('overflow-y', 'scroll');

            if (!isBatchResources) {
                $('#loaderModal').hide();
                showHideListView();
            }
        }

        /****************************************************************/
        /*                                                              */
        /*      this method shows/hides the booking windows for a day   */
        /*                                                              */
        /****************************************************************/
        function showHideWindows(el) {
        	if ($(el).text() == '+') {
        		$(el).closest('.bookingWindowGroup').find('.settingsBookingWindows').show();
        		$(el).closest('.bookingWindowGroup').addClass('background-gray');
        		$(el).text('-');
        	}
        	else {
        		$(el).closest('.bookingWindowGroup').find('.settingsBookingWindows').hide().removeClass('background-gray');
        		$(el).closest('.bookingWindowGroup').removeClass('background-gray');
        		$(el).text('+');
        	}
        }

        /****************************************************************/
        /*                                                              */
        /*      this method removes a booking window row for a day      */
        /*                                                              */
        /****************************************************************/
        function removeSettingsBookingWindowRow(el) {
        	$(el).closest('.bookingWindowsInnerGroup').remove();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method adds a booking window row for a day         */
        /*                                                              */
        /****************************************************************/
        function addSettingsBookingWindowRow(el, windowObj) {
            var settingsRowNum = 0;
            var bookingWindowGroup = $(el).closest('.bookingWindowGroup');

            if (bookingWindowGroup.find('.timeDiv').length > 0) {
                var lastRowRadio = $(bookingWindowGroup).find('input[type="radio"]:last')[0];
                settingsRowNum = $(lastRowRadio).attr('name').split('EndTime')[1];
            }
        	settingsRowNum++;

        	var dayOfWeekEl = $(bookingWindowGroup).find('.dayOfWeek')[0]
        	var dayOfWeek = $(dayOfWeekEl).text();
            var tabDiv = $(el).closest('.tabDiv').attr('name');

        	var newRowHtml = '<div class="bookingWindowsInnerGroup">'
			                	+ '<div class="timeDiv">'
			                        + 'Start: <div class="ma-form-control icon-right"><div class="dropdown-triangle"></div><select class="ma-input startTime">' + timeOptions + '</select></div>'
			                        + ' <input type="radio" name="' + tabDiv + dayOfWeek + 'StartTime' + settingsRowNum + '" value="AM" checked="true"> AM</input>'
			                        + ' <input type="radio" name="' + tabDiv + dayOfWeek + 'StartTime' + settingsRowNum + '" value="PM"> PM</input>'
			                    + '</div>'
			                    + ' <div class="timeDiv">'
			                        + 'End: <div class="ma-form-control icon-right"><div class="dropdown-triangle"></div><select class="ma-input endTime">' + timeOptions + '</select></div>'
			                        + ' <input type="radio" name="' + tabDiv + dayOfWeek + 'EndTime' + settingsRowNum + '" value="AM"> AM</input>'
			                        + ' <input type="radio" name="' + tabDiv + dayOfWeek + 'EndTime' + settingsRowNum + '" value="PM" checked="true"> PM</input>'
			                    + '</div>'
			                    + ' <span class="removeTimeSlot pointer" onclick="removeSettingsBookingWindowRow(this);"><img src="/resource/1461010458000/MA_Scheduler/images/close-table-row.png" /></span>'
			                + '</div>';

            $(el).before(newRowHtml);

            if (windowObj != undefined && windowObj != null) {
            	var newRow = $(el).prev();

            	var startTime = windowObj['start'];
            	var startTimeAmPm = 'AM';
            	var startTimeSplit = startTime.split(':');
            	var startTimeHour = startTimeSplit[0];
            	if (startTimeHour >= '12') {
            		startTimeAmPm = 'PM';
            		startTimeHour = (parseInt(startTimeHour) - 12).toString();
            	}

            	if (startTimeHour == '0' || startTimeHour == '00') {
            		startTimeHour = '12';
            	}
            	else if (startTimeHour.startsWith('0')) {
            		startTimeHour = startTimeHour.replace('0', '');
            	}

            	startTime = startTimeHour + ':' + startTimeSplit[1];

            	$(newRow).find('.startTime').val(startTime);
            	$(newRow).find('input[type="radio"][name="' + tabDiv + dayOfWeek + 'StartTime' + settingsRowNum + '"][value="' + startTimeAmPm + '"]').attr('checked', true);

            	var endTime = windowObj['end'];
            	var endTimeAmPm = 'AM';
            	var endTimeSplit = endTime.split(':');
            	var endTimeHour = endTimeSplit[0];

            	if (endTimeHour >= '12') {
            		endTimeAmPm = 'PM';
            		endTimeHour = (parseInt(endTimeHour) - 12).toString();
            	}
            	
            	if (endTimeHour == '0' || endTimeHour == '00') {
            		endTimeHour = '12';
            	}
            	else if (endTimeHour.startsWith('0')) {
            		endTimeHour = endTimeHour.replace('0', '');
            	}

            	endTime = endTimeHour + ':' + endTimeSplit[1];

            	$(newRow).find('.endTime').val(endTime);
            	$(newRow).find('input[type="radio"][name="' + tabDiv + dayOfWeek + 'EndTime' + settingsRowNum + '"][value="' + endTimeAmPm + '"]').attr('checked', true);
            }
        }

        /****************************************************************/
        /*                                                              */
        /*      this method removes a resources hours row for a day     */
        /*                                                              */
        /****************************************************************/
        function removeSettingsHoursRow(el, hoursType) {
        	if (hoursType == 'resource') {
	            var hoursGroup = $(el).closest('.' + hoursType + 'HoursGroup');
	            var dayOfWeekEl = $(hoursGroup).find('.dayOfWeek')[0];
	            var dayOfWeek = $(dayOfWeekEl).text();
        		
        		$(el).closest('tr').prev().find('td.' + dayOfWeek + 'ResourceHoursCol').text('');
        	}

            $(el).closest('.settings' + hoursType + 'Hours').find('.addHours').show();
            $(el).closest('.' + hoursType + 'HoursInnerGroup').remove();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method updates the resource summary row            */
        /*      when a resources hours change                           */
        /*                                                              */
        /****************************************************************/
        function updateResourceColHours(el) {
        	var hoursGroup = $(el).closest('.resourceHoursGroup');
            var dayOfWeekEl = $(hoursGroup).find('.dayOfWeek')[0];
            var dayOfWeek = $(dayOfWeekEl).text();
            var resourceId = $(hoursGroup).closest('td').attr('resource-id');

            var startTime = $(hoursGroup).find('.startTime').val();
        	var startTimeAmPm = $(hoursGroup).find('input[type="radio"][name="resource' + resourceId + dayOfWeek + 'StartTime"]:checked').val();
        	var endTime = $(hoursGroup).find('.endTime').val();
        	var endTimeAmPm = $(hoursGroup).find('input[type="radio"][name="resource' + resourceId + dayOfWeek + 'EndTime"]:checked').val();
    		
    		$(el).closest('tr').prev().find('td.' + dayOfWeek + 'ResourceHoursCol').text(startTime + ' ' + startTimeAmPm + ' - ' + endTime + ' ' + endTimeAmPm);
        }

        /****************************************************************/
        /*                                                              */
        /*      this method adds a resources hours row for a day        */
        /*                                                              */
        /****************************************************************/
        function addSettingsHoursRow(el, hoursType, hoursObj) {
            var hoursGroup = $(el).closest('.' + hoursType + 'HoursGroup');
            var dayOfWeekEl = $(hoursGroup).find('.dayOfWeek')[0];
            var dayOfWeek = $(dayOfWeekEl).text();

            var startTime = '12:00';
        	var startTimeAmPm = 'AM';
        	var endTime = '12:00';
        	var endTimeAmPm = 'PM';

        	var onchangeEvent = hoursType == 'resource' ? ' onchange="updateResourceColHours(this);"' : '';
        	var resourceId = hoursType == 'resource' ? $(hoursGroup).closest('td').attr('resource-id') : '';

            var newRowHtml = '<div class="' + hoursType + 'HoursInnerGroup">'
                                + '<div class="timeDiv">'
                                    + 'Start: <div class="ma-form-control icon-right"><div class="dropdown-triangle"></div><select class="ma-input startTime"' + onchangeEvent + '>' + timeOptions + '</select></div>'
                                    + ' <input type="radio" name="' + hoursType + resourceId + dayOfWeek + 'StartTime" value="AM" checked="true"' + onchangeEvent + '> AM</input>'
                                    + ' <input type="radio" name="' + hoursType + resourceId + dayOfWeek + 'StartTime" value="PM"' + onchangeEvent + '> PM</input>'
                                + '</div>'
                                + ' <div class="timeDiv">'
                                    + 'End: <div class="ma-form-control icon-right"><div class="dropdown-triangle"></div><select class="ma-input endTime"' + onchangeEvent + '>' + timeOptions + '</select></div>'
                                    + ' <input type="radio" name="' + hoursType + resourceId + dayOfWeek + 'EndTime" value="AM"' + onchangeEvent + '> AM</input>'
                                    + ' <input type="radio" name="' + hoursType + resourceId + dayOfWeek + 'EndTime" value="PM" checked="true"' + onchangeEvent + '> PM</input>'
                                + '</div>'
                                + ' <span class="removeTimeSlot pointer" onclick="removeSettingsHoursRow(this, \'' + hoursType + '\');"><img src="/resource/1461010458000/MA_Scheduler/images/close-table-row.png" /></span> '
                            + '</div>';

            $(el).before(newRowHtml);

            if (hoursObj != undefined && hoursObj != null) {
            	var newRow = $(el).prev();

            	startTime = hoursObj['start'];
            	startTimeAmPm = 'AM';
            	var startTimeSplit = startTime.split(':');
            	var startTimeHour = startTimeSplit[0];
            	if (startTimeHour >= '12') {
            		startTimeAmPm = 'PM';
            		startTimeHour = (parseInt(startTimeHour) - 12).toString();
            	}

            	if (startTimeHour == '0' || startTimeHour == '00') {
            		startTimeHour = '12';
            	}
            	else if (startTimeHour.startsWith('0')) {
            		startTimeHour = startTimeHour.replace('0', '');
            	}

            	startTime = startTimeHour + ':' + startTimeSplit[1];

            	$(newRow).find('.startTime').val(startTime);
            	$(newRow).find('input[type="radio"][name="' + hoursType + resourceId + dayOfWeek + 'StartTime"][value="' + startTimeAmPm + '"]').attr('checked', true);

            	endTime = hoursObj['end'];
            	endTimeAmPm = 'AM';
            	var endTimeSplit = endTime.split(':');
            	var endTimeHour = endTimeSplit[0];

            	if (endTimeHour >= '12') {
            		endTimeAmPm = 'PM';
            		endTimeHour = (parseInt(endTimeHour) - 12).toString();
            	}
            	
            	if (endTimeHour == '0' || endTimeHour == '00') {
            		endTimeHour = '12';
            	}
            	else if (endTimeHour.startsWith('0')) {
            		endTimeHour = endTimeHour.replace('0', '');
            	}

            	endTime = endTimeHour + ':' + endTimeSplit[1];

            	$(newRow).find('.endTime').val(endTime);
            	$(newRow).find('input[type="radio"][name="' + hoursType + resourceId + dayOfWeek + 'EndTime"][value="' + endTimeAmPm + '"]').attr('checked', true);
            }

        	if (hoursType == 'resource') {
        		$(el).closest('tr').prev().find('td.' + dayOfWeek + 'ResourceHoursCol').text(startTime + ' ' + startTimeAmPm + ' - ' + endTime + ' ' + endTimeAmPm);
        	}

            $(el).hide();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method show the holiday entry section              */
        /*                                                              */
        /****************************************************************/
        function openHolidayExceptionModal() {
            $('#newHolidayExceptionReason, #newHolidayExceptionDate').val('');
            $('#newHolidaySelectionModal').show();
            $('.add-exception-button').hide();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method hides the holiday entry section             */
        /*                                                              */
        /****************************************************************/
        function closeHolidayExceptionModal() {
            $('#newHolidayExceptionReason, #newHolidayExceptionDate').val('');
            $('#newHolidaySelectionModal').hide();
            $('.add-exception-button').show();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method adds the new holiday to the holiday table   */
        /*                                                              */
        /****************************************************************/
        function addHolidayException(holiday) {
            var holidayDate;
            if (holiday) {
            	holidayDate = holiday.date;
            }
            else {
				holidayDate = $('#newHolidayExceptionDate').val();
            }

            if (holidayDate != undefined && holidayDate != null && holidayDate != '') {
                var dayOfWeek;
	            var holidayReason;

            	if (holiday) {
	            	dayOfWeek = holiday.dayOfWeek;
		            holidayReason = holiday.reason;
		        }
            	else {
	            	var d = new Date(holidayDate);
	            	var days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];
	                dayOfWeek = days[d.getDay()];
		            holidayReason = $('#newHolidayExceptionReason').val();
		        }

                var holidayTableRowHtml = '<tr class="holidayRow">'
	                                        + '<td>'
	                                            + '<span class="removeHoliday" onclick="removeHoliday(this);"><img src="/resource/1461010458000/MA_Scheduler/images/close-table-row.png"></span><span class="holidayDate"></span>'
	                                        + '</td>'
	                                        + '<td>'
	                                            + '<span class="holidayDate">' + holidayDate + '</span>'
	                                        + '</td>'
	                                        + '<td>'
	                                            + '<span class="holidayReason">' + holidayReason + '</span>'
	                                        + '</td>'
	                                        + '<td>'
	                                            + '<span class="holidayDayOfWeek">' + dayOfWeek + '</span>'
	                                        + '</td>'
	                                    + '</tr>';
                $('#storeSettingsHolidayTable').append(holidayTableRowHtml);
            }

            closeHolidayExceptionModal();
        }

        /****************************************************************/
        /*                                                              */
        /*      this method removes a holiday from the holiday table    */
        /*                                                              */
        /****************************************************************/
        function removeHoliday(el) {
        	$(el).closest('tr').remove();
        }

		/****************************************************************/
        /*                                                              */
        /*      this method filter the resource table through the       */
        /*      search bar                                              */
        /*                                                              */
        /****************************************************************/
        function resourcesSettingsSearchFiltering(el) {
			var val = $(el).val().toLowerCase();
			var resourceNames = $('.resourceSettingsNameCol');

			for (var i = 0, len = resourceNames.length; i < len; i++) {
				var row = $(resourceNames[i]).closest('tr');
				var hoursRow = $(row).next();

				if ($(resourceNames[i]).text().toLowerCase().indexOf(val) > -1) {
					$(row).show();
				}
				else {
					$(row).hide();
					$(hoursRow).hide();
				}
			}
		}
        
        /****************************************************************/
        /*                                                              */
        /*      this method highlights the active tab                   */
        /*                                                              */
        /****************************************************************/
        $(document).on('click', '.ma-tab-link', function() {
    		var tab_id = $(this).attr('data-tab');
    		$(this).siblings('.ma-tab-link').removeClass('active');
    		$("#"+tab_id).siblings('.ma-tab-content').removeClass('active');
    		$(this).addClass('active');
    		$("#"+tab_id).addClass('active');
    	});

        /****************************************************************/
        /*                                                              */
        /*      this method verifies the routing service credentials    */
        /*                                                              */
        /****************************************************************/
        function verifyEsriLogin() {
            $('#loaderModal').show();
            var response = sforce.apex.execute('MA_RoutingSchedulerController', 'getESRIToken', { storeId: $('#storeSelect').val(), isVerification: true, clientId: $('#esriClientId').val(), clientSecret: $('#esriClientSecret').val() }, verifyEsriResponse);
        }

        /************************************************************************************/
        /*                                                                                  */
        /*      this method handles the routing service verification response               */
        /*                                                                                  */
        /************************************************************************************/
        function verifyEsriSuccess(response) {
            response = JSON.parse(response);

            if (!response.error && response.access_token != undefined && response.access_token != null) {
                $('.esri-verify-success').show();
                $('.esri-verify-fail').hide();
            }
            else {
                $('.esri-verify-fail').show();
                $('.esri-verify-success').hide();
            }

            $('#loaderModal').hide();
        }

        /************************************************************************************************/
        /*                                                                                              */
        /*      this method handles toggling on and off the visibility of the ESRI credentials          */
        /*                                                                                              */
        /************************************************************************************************/
        function toggleEsriCredentialsVisibility(el) {
            if ($(el).text() == 'show') {
                $('.esriCredentialsInputs').show();
                $('#showEsriLink').hide();
                $('#hideEsriLink').show();

                $('#storeSettings .ma-modal-settings.compact').animate({ scrollTop: $("#esriClientSecret").offset().top }, 1000);
            }
            else if ($(el).text() == 'hide') {
                $('.esriCredentialsInputs').hide(1000);
                $('#hideEsriLink').hide();
                $('#showEsriLink').show();

                $('.esriCredentialsInputs .ma-input').attr('disabled', true);
            }
        }

        /************************************************************************************/
        /*                                                                                  */
        /*      this method handles unlocking the ESRI credentials for editing              */
        /*                                                                                  */
        /************************************************************************************/
        function unlockEsriCredentials() {
            $('.esriCredentialsInputs .ma-input').removeAttr('disabled');
        }
            
    </script>
    
    
	<div id="settingsModal">
        <div id="settingsOverlay" />
        <div id="settingsContent">
            <div id="storeSettings">
                <div id="settingsHeader">
                    <c:MA_SchedulerMainNav />
                </div>
                <div class="ma-modal-settings compact">
                    <div class="ma-tab-vertical-wrap">
                        <div class="ma-tab-link-group">
                            <a class="ma-tab-link active" data-tab="tab-store-settings">Store Settings</a>
                            <a class="ma-tab-link" data-tab="tab-resource-settings">Resource Settings</a>
                        </div>
        
                        <div class="ma-tab-content-group">
                            <div class="ma-tab-content active" id="tab-store-settings">
								<span class="ipsum">
	                                <div class="newSettingsGroup">
	                                    <input type="hidden" id="storeSettingsId" />
	                                </div>
	                                <div class="ma-section-title background--dark-gray">Set Hours</div>
	                                <div id="tabs" class="ma-jquery-tab-override">
	                                	<ul>
	                                        <li><a href="#storeSettingsTab">Store</a></li>
	                                	</ul>
	                
	                                    <div id="storeSettingsTab" name="Store Settings" class="tabDiv ma-jquery-tab-content-override">
	                                        <h2><span>Store Hours</span></h2>
	                                        <div class="innerSettingsGroup" id="storeSettingsTimezone">
	                                            <span>Timezone: </span>
	                                            <div class="ma-form-control icon-right">
	                                                <div class="dropdown-triangle"></div>
	                                                <select class="ma-input" id="timezoneOptions" />
	                                            </div>
	                                        </div>
	                	                	<div id="storeHours" class="innerSettingsGroup"></div>
	                	                </div>
	                                </div>
	                
	                                <div class="ma-section-title background--dark-gray">Holidays and Exceptions</div>
	                                <div id="storeSettingsHolidays">
	                                    <table id="storeSettingsHolidayTable">
	                                        <tr class="headerRow">
	                                            <th id="removeHolidayRow"></th>
	                                            <th>Date</th>
	                                            <th>Reason</th>
	                                            <th>Day</th>
	                                        </tr>
	                                    </table>
	                
	                                    <div class="holiday-settings-buttons">
	                                       <div id="newHolidaySelectionModal">
	                                            <div>
	                                                <span>Date: </span><span><input type="text" class="ma-input" id="newHolidayExceptionDate" /></span>
	                                            </div>
	                                            <div>
	                                                <span>Reason: </span><span><input type="text" class="ma-input" id="newHolidayExceptionReason" /></span>
	                                            </div>
	                                            <div>
	                                                <button class="ma-button ma-button--green" onclick="addHolidayException();">Add</button>
	                                                <button class="ma-button ma-button--white" onclick="closeHolidayExceptionModal();">Cancel</button>
	                                            </div> 
	                                        </div>
	                                        <div class="add-exception-button">
	                                            <button class="ma-button ma-button--blue" onclick="openHolidayExceptionModal();">Add New Exception</button>
	                                        </div> 
	                                    </div>
	                                </div> 
	                                <div class="ma-section-title background--dark-gray esriCredentials">
                                        Esri License Key 
                                        <span id="showEsriLink" onclick="toggleEsriCredentialsVisibility(this);">show</span>
                                        <span id="hideEsriLink" onclick="toggleEsriCredentialsVisibility(this);">hide</span>
                                    </div>
	                                <div id="storeSettingsEsri" class="esriCredentialsInputs">
                						<div class="">
                                            <div style="padding-top: 1rem;">
                    						    <label class="ma-input-label">Client Id:</label>
                                                <input class="ma-input" type="text" id="esriClientId" placeholder="Enter here" disabled="true"></input>
                                            </div>
                                            <div style="padding-top: 1rem;">
                                                <label class="ma-input-label">Client Secret:</label>
                                                <input class="ma-input" type="password" id="esriClientSecret" placeholder="Enter here" disabled="true"></input>
                                            </div>
                                            <div style="padding-top: 1rem;">
                                                <button class="ma-button ma-button--green" onclick="verifyEsriLogin();">Verify</button>
                                                <button class="ma-button ma-button--green" onclick="unlockEsriCredentials();">Edit</button>
                                            </div>
                                            <div class="esri-verify-success" style="display: none;"><p>Verified</p></div>
                                            <div class="esri-verify-fail" style="display: none;"><p>Verification Failed</p></div>
                                        </div>
                                    </div>
	                            </span>
    						</div>

    						<div class="ma-tab-content" id="tab-resource-settings">
    							<div class="pad-32">
    								<table id="resourcesSettingsTable">
    			                		<tr class="headerRow">
    			                			<th>Resource</th>
    			                			<th>Type</th>
    			                			<th>Sunday</th>
    			                			<th>Monday</th>
    			                			<th>Tuesday</th>
    			                			<th>Wednesday</th>
    			                			<th>Thursday</th>
    			                			<th>Friday</th>
    			                			<th>Saturday</th>
    			                			<td><input type="text" class="settingsResourceSearch floatRight" onkeyup="resourcesSettingsSearchFiltering(this);" placeholder="Search" /></td>
    			                		</tr>
    			                	</table>
    							</div>
    						</div>
                        </div>
                    </div>
                </div>

                <div class= "ma-settings-modal-footer">
                    <div class="ma-modal-padding clearfix floatRight" id="settingsButtons">
                        <button class="ma-button ma-button--white" onclick="closeSettingsModal();">Cancel</button>
                        <button class="ma-button ma-button--green" onclick="saveSettings();">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</apex:component>