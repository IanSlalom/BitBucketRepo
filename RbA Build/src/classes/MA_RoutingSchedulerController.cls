global with sharing class MA_RoutingSchedulerController {

    private static final string ESRIClientID = 'YRGMYKIjOjSpQnUz';
    private static final string ESRIClientSecret = 'ff4a4b1ecc9b43c591ac05ef98df135e';
    private static final string ArcGISauth = 'https://www.arcgis.com/sharing/rest/oauth2/token/';
    private static Set<Id> rId; // = new Set<Object>();
    private static Map<String, Object> configs = new Map<String,Object>();
    private static Map<Id, Object> evConfigs = new Map<Id,Object>(); 
    //private static Map<String, String> storeSettings;
    //private static Map<String, List<Object>> objLists; //objLists = new Map<String, List<Object>>();
    //private static Map<String, Map<String, Object>> master  = new  Map<String, Map<String, Object>>();
    private static Map<String, Object> master  = new  Map<String, Object>();

    public MA_RoutingSchedulerController(){}
    
     webService static String getESRIToken()
     {
        String error = 'An error occured with your request. Please check your internet connection.';
        String returnRes;
        Http h = new Http();
        HttpRequest req = new HttpRequest();
        HttpResponse res = new HttpResponse();
        req.setEndpoint(ArcGISauth);
        req.setMethod('POST');
        req.setBody('client_id=' + EncodingUtil.urlEncode(ESRIClientID,'UTF-8')+'&client_secret='+EncodingUtil.urlEncode(ESRIClientSecret,'UTF-8')+'&grant_type='+'client_credentials'+'&expiration='+'8000');
        try{
            res = h.send(req);
            System.debug(res.getBody());
            //JSONParser parser = JSON.createParser(res.getBody());
            /*while (parser.nextToken() != null)
            {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME)
                    && (parser.getText() == 'access_token'))
                {
                    parser.nextToken();
                    returnRes = parser.getText();
                    break;
                }
                else if((parser.getCurrentToken() == JSONToken.FIELD_NAME)
                    && (parser.getText() == 'error'))
                {
                    //System.debug(res.getBody());
                    returnRes = res.getBody();
                    break;
                }
                else
                {
                    System.debug('ERROR+++ '+ res.getStatus());
                    System.debug('ERROR BODY+++ '+ res.getBody());
                    System.debug('STATUS CODE+++ '+ res.getStatusCode());
                    returnRes = error;
                }
            }*/
        }
        catch(System.CalloutException e){
            System.debug('Callout error: '+ e);
            System.debug(res.toString());
        }
        //return returnRes;
        return res.getBody();
    }
    
    webService static String getRecords(String dt, String storeId)
    {
        List<Object> eventList = new List<Object>();
        List<Object> MAeventList = new List<Object>();
        List<Object> settings = new List<Object>();
        List<Object> WOList = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        try
        {
            if(String.isNotBlank(dt) && String.isNotBlank(storeId))
            {
                Date d = Date.valueOf(dt);
                DateTime dateT = (DateTime)d;
                Long milliTime = dateT.getTime();
                master.put('defaultdate', milliTime);
                //Set up Depots first for the day
                depotSettings(dt, storeId);
                //Set up Resources and Routes with skills second for the day
                setupResource(dt, storeId);
                //Set up breaks and WOs that have been assigned to Resources/Routes for the day
                setupEvents(dt, storeId);
                //Set up breaks and WOs that have been assigned to Resources/Routes for the day
                setupMAEvents(dt, storeId);
                //Set up rest of work orders that are not assigned for the day
                setupWO(dt, storeId);
                //Success is true
                master.put('success', true);
                
            }
            else
            {
                List<Object> errorFeatures = new List<Object>();
                Map<String, Object> errors = new Map<String, Object>();
                errors.put('success', false);
                String e = String.isNotBlank(dt) ? ' No Date selected. Select a Date on the calendar to optimize.' : null; 
                String e2 = String.isNotBlank(storeId) ? ' No store has been selected.' : null;
                errors.put('dt', e);
                errors.put('storeId', e2);
                errorFeatures.add(errors);
                objLists.put('errors', errorFeatures);
                master.put('error', objLists);
                master.put('success', false);
            }
        }
        catch(Exception ex)
        {
            List<Object> errorFeatures = new List<Object>();
            Map<String, Object> errors = new Map<String, Object>();
            errors.put('success', false);
            errors.put('RecordsError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
            master.put('success', false);
        }
        return JSON.serialize(master);
    }
    
    private static void setupResource(String dt, String storeId)
    {
        //List<Object> routes = new List<Object>();
        //List<sObject> resourceList = new List<sObject>();
        List<Object> features = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        rId = new Set<Id>();
        try
        {
            for(List<SObject> l : [SELECT Id,Name, Active__c, Available_Time_Window__c, Crew_Size__c, RbA_User__c, Resource_Type__c, Retail_Location__c,(SELECT Id, Name, RbA_Skill__c, Type__c FROM Resource_Skills__r) FROM Resource__c WHERE  Retail_Location__c =: storeId AND Active__c =: true AND Resource_Type__c =: 'Tech Measure' Limit 100])
            {
                for(SObject res : l)
                {
                    Map<String, Object> obj = new Map<String, Object>();
                    Map<String, Object> attributes = new Map<String, Object>();
                    //Set of UserId that need to be used for grabbing events
                    //rId = new Set<Id>();
                    rId.add((ID)res.get('RbA_User__c'));
                    //attributes
                    attributes.put('Name', res.get('Id'));
                    if(configs.containsKey((String)res.get('Retail_Location__c')))
                    {
                        attributes.put('StartDepotName', res.get('Retail_Location__c'));
                        attributes.put('EndDepotName', res.get('Retail_Location__c'));
                        //attributes.put('StartDepotServiceTime');
                        //attributes.put('EndDepotServiceTime');
                    }
                    else
                    {
                        attributes.put('StartDepotName', res.get('Retail_Location__c'));
                        attributes.put('EndDepotName', res.get('Retail_Location__c')); 
                        attributes.put('StartDepotServiceTime', 15);
                        attributes.put('EndDepotServiceTime', 15);
                    }
                    if(configs.containsKey((String)res.get('Id')))
                    {
                        //Deseralize resource configs settings
                        

                        MA_SchedulerSettings ma = (MA_SchedulerSettings)JSON.deserialize((String)configs.get((String)res.get('Id')) , MA_SchedulerSettings.class);
                        system.debug(ma);
                        system.debug(ma.storeHours);
                        system.debug(ma.timezone);

                        //ma.MA_SchedulerSettings(JSONParser((String)configs.get((String)res.get('Id'))));
                        //ma.MA_SchedulerSettings(JSONParser parser) = (Map<String, Object>)JSON.deserialize((String)configs.get((String)res.get('Id')) , Map<String, Object>.class);
                        //JSONParser parser = JSON.createParser((String)configs.get((String)res.get('Id')));
                        //ma.MA_SchedulerSettings(parser);
                        

                        /*attributes.put('EarliestStartTime');
                        attributes.put('LatestStartTime');
                        attributes.put('ArriveDepartDelay');
                        attributes.put('Capacities');
                        attributes.put('FixedCost');
                        attributes.put('CostPerUnitTime');
                        attributes.put('CostPerUnitDistance');
                        attributes.put('OverTimeStartTime');
                        attributes.put('MaxOrderCount');
                        attributes.put('MaxTotalTime');
                        attributes.put('MaxTotalTravelTime');
                        attributes.put('MaxTotalDistance');*/
                        //configs.get((String)res.get('Id')).Settings__c = (String)attributes;


                        //attributes = configs.get((String)res.get('Id'));

                    }
                    else
                    {
                        system.debug('There is no resources settings for this resource');
                        /*
                        attributes.put('EarliestStartTime');
                        attributes.put('LatestStartTime');
                        attributes.put('ArriveDepartDelay');
                        attributes.put('Capacities');
                        attributes.put('FixedCost');
                        attributes.put('CostPerUnitTime');
                        attributes.put('CostPerUnitDistance');
                        attributes.put('OverTimeStartTime');
                        attributes.put('MaxOrderCount');
                        attributes.put('MaxTotalTime');
                        attributes.put('MaxTotalTravelTime');
                        attributes.put('MaxTotalDistance');*/
                        //configs.put((String)res.get('Id'), attributes);
                    }
                    String skills;
                    if((List<Resource_Skill__c>)res.getSObjects('Resource_Skills__r') != null && !((List<Resource_Skill__c>)res.getSObjects('Resource_Skills__r')).isEmpty())
                    {
                        List<Object> skillIds = new List<Object>();
                        for(Resource_Skill__c skill : (List<Resource_Skill__c>)res.getSObjects('Resource_Skills__r'))
                        {
                            //skills += skill.RbA_Skill__c + '';
                            skillIds.add(skill.RbA_Skill__c);

                        }
                        skillIds.add(res.get('Resource_Type__c'));
                        skills = String.join(skillIds, ' ');
                        //skills = skills.replaceAll('(\\s+)', ' ');
                        attributes.put('SpecialtyNames', skills);
                    }
                    else
                    {
                        if(master.containsKey('error'))
                        {
                            Map<String, Object> tempError = (Map<String, Object>)master.get('error');
                            List<Object> tempErrors = (List<Object>)tempError.get('errors');
                            Map<String, Object> errors = new Map<String, Object>();
                            errors.put((String)res.get('Id'), (String)res.get('Name') + ': Resource Skills: No skills on Resource.');
                            tempErrors.add(errors);
                            //system.debug(tempFeat);
                        }
                        else
                        {
                            Map<String, Object> errors = new Map<String, Object>();
                            List<Object> errorFeatures = new List<Object>();
                            Map<String, List<Object>> objListsErrors = new Map<String, List<Object>>();
                            errors.put((String)res.get('Id'), (String)res.get('Name') + ': Resource Skills: No skills on Resource.');
                            errorFeatures.add(errors);
                            objListsErrors.put('errors', errorFeatures);
                            master.put('error', objListsErrors);
                        }
                    }
                    //attributes.put('AssignmentRule');

                    configs.put((String)res.get('RbA_User__c'), attributes);
                    obj.put('attributes', attributes);
                    features.add(obj);
                }
            }
            objLists.put('features', features);
            master.put('routes', objLists);
        }
        catch(Exception ex)
        {
            List<Object> errorFeatures = new List<Object>();
            Map<String, Object> errors = new Map<String, Object>();
            objLists = new Map<String, List<Object>>();
            errors.put('success', false);
            errors.put('RouteError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
        }
        
    }
    
    private static void setupEvents(String dt, String storeId)
    {
        List<Object> features = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        try
        {
            for(List<SObject> l : [SELECT Id, OwnerId, Type, StartDateTime, EndDateTime, ActivityDate, DurationInMinutes, WhoId, WhatId, ActivityDateTime FROM Event WHERE OwnerId =: rId AND ActivityDate =: Date.valueOf(dt)])
            {
                for(SObject ev : l)
                {
                    Map<String, Object> obj = new Map<String, Object>();
                    Map<String, Object> attributes = new Map<String, Object>();

                    if(configs.containsKey((String)ev.get('OwnerId')))
                    {
                        if(ev.get('Type') != 'Tech Measure')
                        {
                            attributes.put('RouteName', ((Map<String, Object>)configs.get('OwnerId')).get('Name'));
                            //attributes.put('Precedence',);
                            attributes.put('ServiceTime', ev.get('DurationInMinutes'));
                            
                            attributes.put('TimeWindowStart', ((DateTime)ev.get('StartDateTime')).getTime());
                            attributes.put('TimeWindowEnd', ((DateTime)ev.get('EndDateTime')).getTime());
                            //attributes.put('MaxViolationTime',);
                            //attributes.put('MaxCumulWorkTime',);
                            //attributes.put('IsPaid',);
                            //attributes.put('Sequence',);
                        }
                        else
                        {
                            //This is WO related event
                            //Add to Map<Id, String> of maybe of Resource - OwnerId, WO Id - *WhatId
                            configs.put((Id)ev.get('WhatId'), ev);
                            //evConfigs.put((Id)ev.get('WhatId'), ev);
                        }
                    }
                    else
                    {
                        //This event is not related to any of our resources/users
                        //Do something else with this

                    }
                    //configs.put((String)s.get('Store_Id__c'), (String)s.get('Settings__c'));
                    obj.put('attributes', attributes);
                    features.add(obj);
                }
                
            }
            objLists.put('features', features);
            master.put('breaks', objLists); 
        }
       catch(Exception ex)
        {
            Map<String, Object> errors = new Map<String, Object>();
            List<Object> errorFeatures = new List<Object>();
            objLists = new Map<String, List<Object>>();
            errors.put('success', false);
            errors.put('EventError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
        }
    }
    private static void setupMAEvents(String dt, String storeId)
    {
        //List<Object> MAevents = new List<Object>();
        List<Object> features = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        try{
            for(List<SObject> l : [SELECT Id, Name, StartDateTime__c, EndDateTime__c, RbA_Work_Order__c, Resource__c, Resource__r.Active__c, Resource__r.Available_Time_Window__c, Resource__r.Crew_Size__c, Resource__r.RbA_User__c, Resource__r.Resource_Type__c, Resource__r.Retail_Location__c FROM MA_Scheduler_Event__c WHERE RbA_Work_Order__r.Appointment_Date__c =: Date.valueOf(dt)])
            {
                for(SObject MAev : l)
                {
                    configs.put((Id)MAev.get('RbA_Work_Order__c'), MAev);
                    //evConfigs.put((Id)MAev.get('RbA_Work_Order__c'), MAev); 
                }
            }
        }
       catch(Exception ex)
        {
            Map<String, Object> errors = new Map<String, Object>();
            List<Object> errorFeatures = new List<Object>();
            objLists = new Map<String, List<Object>>();
            errors.put('success', false);
            errors.put('MAEventError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
        }
    }
    private static void setupWO(String dt, String storeId)
    {
        List<Object> features = new List<Object>();
        List<Object> featuresGeoCode = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        Map<String, List<Object>> objListsGeoCode = new Map<String, List<Object>>();
        try
        {
            for(List<SObject> l : [SELECT Id, Name, Appointment_Date__c, Appointment_Duration__c, Appointment_Start_Time__c, Appointment_End_Time__c, Alternate_End_Time__c, Alternate_Start_Time__c, Zip__c, Recommended_Crew_Size__c, Street__c, State__c, City__c,Country__c, Work_Order_Type__c, Account__r.Store_Location__r.Active_Store_Configuration__c, Account__r.ShippingLatitude, Account__r.ShippingLongitude,(SELECT Id, RbA_Skill__c FROM Work_Order_Required_Skills__r)FROM RbA_Work_Order__c WHERE Appointment_Date__c =: Date.valueOf(dt) AND Account__r.Store_Location__r.Active_Store_Configuration__c =: storeId])
            {
                //system.debug(l);
                for(SObject wo : l)
                {
                    system.debug(wo);
                    Map<String, Object> obj = new Map<String, Object>();
                    Map<String, Object> geoCodeObj = new Map<String, Object>();
                    Map<String, Object> geometry =  new Map<String, Object>();
                    Map<String, Object> attributes = new Map<String, Object>();
                    Map<String, Object> geoCodeAddress = new Map<String, Object>();
                    
                    //Stuff to be GeoCode - Need to see hwo we want to GeoCode everything **If latlngs are avaiable we can create the geometry here
                    //if(((RbA_Work_Order__c)wo.get('Account__r.ShippingLatitude')) != null && ((RbA_Work_Order__c)wo.get('Account__r.ShippingLongitude')) != null)
                    RbA_Work_Order__c rb = (RbA_Work_Order__c)wo;
                    if(rb.Account__r.ShippingLongitude != null && rb.Account__r.ShippingLatitude != null)
                    {
                        geometry.put('x', rb.Account__r.ShippingLongitude);
                        geometry.put('y',  rb.Account__r.ShippingLatitude);
                        obj.put('geometry', geometry);
                    }
                    else
                    {
                        //Add Blank geometry object
                        geometry.put('x', rb.Account__r.ShippingLongitude);
                        //geometry.put('x', '');
                        geometry.put('y', rb.Account__r.ShippingLongitude);
                        //geometry.put('y','');
                        obj.put('geometry', geometry);

                        //Create geoCode object to geocode later
                        geoCodeAddress.put('id', rb.Id);
                        geoCodeAddress.put('city', rb.City__c);
                        geoCodeAddress.put('state', rb.State__c);
                        geoCodeAddress.put('country', rb.Country__c);
                        geoCodeAddress.put('zip', rb.Zip__c);
                        geoCodeAddress.put('street', rb.Street__c);
                        geoCodeObj.put(rb.Id, geoCodeAddress);
                        featuresGeoCode.add(geoCodeObj);
                        if(master.containsKey('geocode'))
                        {
                            Map<String, Object> tempGeo = (Map<String, Object>)master.get('geocode');
                            List<Object> tempFeat = (List<Object>)tempGeo.get('features');
                            tempFeat.add(geoCodeObj);
                            //system.debug(tempFeat);
                        }
                        else
                        {
                            objListsGeoCode.put('features', featuresGeoCode);
                            master.put('geocode', objListsGeoCode);
                        }
                    }
                    
                    //Attributes stuff
                    if(configs.containsKey(rb.Id))
                    {
                        attributes.put('Name', rb.Id);
                        attributes.put('WOName', rb.Name);
                        attributes.put('ServiceTime', rb.Appointment_Duration__c);
                        attributes.put('TimeWindowStart1', ((Map<String, Object>)configs.get(rb.Id)).get('StartDateTime__c'));
                        attributes.put('TimeWindowEnd1', ((Map<String, Object>)configs.get(rb.Id)).get('EndDateTime__c'));
                        attributes.put('TimeWindowStart2', rb.Alternate_Start_Time__c);
                        attributes.put('TimeWindowEnd2', rb.Alternate_End_Time__c);
                        //attributes.put('MaxViolationTime1', );
                        //attributes.put('MaxViolationTime2', );
                        //attributes.put('DeliveryQuantities', );
                        //attributes.put('PickupQuantities', );
                        //attributes.put('Revenue', );
                        if(rb.Work_Order_Required_Skills__r != null || !rb.Work_Order_Required_Skills__r.isEmpty())
                        {
                            String skills;
                            List<Object> skillIds = new List<Object>();
                            for(Work_Order_Required_Skill__c woSkills : rb.Work_Order_Required_Skills__r)
                            {
                                //skills += woSkills.RbA_Skill__c + '';
                                skillIds.add(woSkills.RbA_Skill__c);

                            }
                            skillIds.add(rb.Work_Order_Type__c);
                            MA_Scheduler_Event__c evMa = (MA_Scheduler_Event__c)configs.get(rb.Id);
                            skillIds.add(evMA.Resource__r.Resource_Type__c);
                            skills = String.join(skillIds, ' ');
                            //skills = skills.deleteWhitespace();
                            //skills = skills.replaceAll('(\\s+)', ' ');
                            attributes.put('SpecialtyNames', skills);
                        }
                        else
                        {
                            if(master.containsKey('error'))
                            {
                                Map<String, Object> tempError = (Map<String, Object>)master.get('error');
                                List<Object> tempErrors = (List<Object>)tempError.get('errors');
                                Map<String, Object> errors = new Map<String, Object>();
                                errors.put(rb.Name, 'WorkOrder Skills: No skills on workOrder.');
                                tempErrors.add(errors);
                                //system.debug(tempFeat);
                            }
                            else
                            {
                                Map<String, Object> errors = new Map<String, Object>();
                                List<Object> errorFeatures = new List<Object>();
                                Map<String, List<Object>> objListsErrors = new Map<String, List<Object>>();
                                errors.put(rb.Name, 'WorkOrder Skills: No skills on workOrder.');
                                errorFeatures.add(errors);
                                objListsErrors.put('errors', errorFeatures);
                                master.put('error', objListsErrors);
                            }
                        }
                        
                        //Need some testing with Assignment Rules // Maybe some configs to the user
                        //attributes.put('AssignmentRule', wo.get('Id'));
                        
                        //There may be need to be settings for this as well
                        attributes.put('CurbApproach', 3);
                        if(((Map<String, Object>)configs.get(rb.Id)).get('Resource__c') != null)
                        {
                            attributes.put('RouteName', ((Map<String, Object>)configs.get(rb.Id)).get('Resource__c'));
                            //attributes.put('Sequence', '');
                        }
                        else
                        {
                            attributes.put('RouteName', '');
                            attributes.put('Sequence', '');
                        }
                    }
                    else
                    {
                        attributes.put('Name', rb.Id);
                        attributes.put('WOName', rb.Name);
                        attributes.put('ServiceTime', rb.Appointment_Duration__c);
                        attributes.put('TimeWindowStart1', rb.Appointment_Start_Time__c);
                        attributes.put('TimeWindowEnd1', rb.Appointment_End_Time__c);
                        attributes.put('TimeWindowStart2', rb.Alternate_Start_Time__c);
                        attributes.put('TimeWindowEnd2', rb.Alternate_End_Time__c);
                        //attributes.put('MaxViolationTime1', );
                        //attributes.put('MaxViolationTime2', );
                        //attributes.put('DeliveryQuantities', );
                        //attributes.put('PickupQuantities', );
                        //attributes.put('Revenue', );
                        if(rb.Work_Order_Required_Skills__r != null || !rb.Work_Order_Required_Skills__r.isEmpty())
                        {
                            String skills;
                            for(Work_Order_Required_Skill__c woSkills : rb.Work_Order_Required_Skills__r)
                            {
                                skills += woSkills.RbA_Skill__c + '';
                            }
                            skills += rb.Work_Order_Type__c + '';
                            attributes.put('SpecialtyNames', skills);
                        }
                        else
                        {
                            //Error No skills on the WorkOrder
                            if(master.containsKey('error'))
                            {
                                Map<String, Object> tempError = (Map<String, Object>)master.get('error');
                                List<Object> tempErrors = (List<Object>)tempError.get('errors');
                                Map<String, Object> errors = new Map<String, Object>();
                                errors.put(rb.Name, 'WorkOrder Skills: No skills on workOrder.');
                                tempErrors.add(errors);
                                //system.debug(tempFeat);
                            }
                            else
                            {
                                Map<String, Object> errors = new Map<String, Object>();
                                List<Object> errorFeatures = new List<Object>();
                                Map<String, List<Object>> objListsErrors = new Map<String, List<Object>>();
                                errors.put(rb.Name, 'WorkOrder Skills: No skills on workOrder.');
                                errorFeatures.add(errors);
                                objListsErrors.put('errors', errorFeatures);
                                master.put('error', objListsErrors);
                            }
                        }
                        
                        //Need some testing with Assignment Rules // Maybe some configs to the user
                        //attributes.put('AssignmentRule', wo.get('Id'));
                        
                        //There may be need to be settings for this as well
                        attributes.put('CurbApproach', 3);
                        attributes.put('RouteName', '');
                        attributes.put('Sequence', '');
                    }


                    //configs.put((String)s.get('Store_Id__c'), (String)s.get('Settings__c'));
                    obj.put('attributes', attributes);
                    obj.put('geometry', geometry);
                    features.add(obj); 
                }
            }
            objLists.put('features', features);
            master.put('orders', objLists);
        }
        catch(Exception ex)
        {
            Map<String, Object> errors = new Map<String, Object>();
            List<Object> errorFeatures = new List<Object>();
            objLists = new Map<String, List<Object>>();
            errors.put('success', false);
            errors.put('WOError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
        }
    }
    private static void depotSettings(String dt, String storeId)
    {
        List<Object> features = new List<Object>();
        List<Object> featuresGeoCode = new List<Object>();
        Map<String, List<Object>> objLists = new Map<String, List<Object>>();
        Map<String, List<Object>> objListsGeoCode = new Map<String, List<Object>>();
        try
        {
            Date d = Date.valueOf(dt);
            DateTime dateT = (DateTime)d;
            String dayOfWeek = dateT.format('EEEE', 'America/New_York');
            Map<Id, sObject> settings = new Map<Id, sObject>([SELECT Id, Store__c, Name, Store__r.BillingCity, Store__r.BillingStreet, Store__r.BillingStateCode, Store__r.BillingState, Store__r.BillingPostalCode, Store__r.BillingCountry, Store__r.BillingLongitude, Store__r.BillingLatitude FROM Store_Configuration__c WHERE Id =: storeId LIMIT 1]);
            for(List<SObject> l : [SELECT Id, Name, Resource_Id__c, Store_Id__c, Settings__c FROM MA_Scheduler_Settings__c WHERE  Store_Id__c =: storeId])
            {
                for(SObject s : l)
                {
                    Map<String, Object> obj = new Map<String, Object>();
                    Map<String, Object> geoCodeObj = new Map<String, Object>();
                    Map<String, Object> geometry = new Map<String, Object>();
                    Map<String, Object> attributes = new Map<String, Object>();
                    //Store settings
                    if(settings.containsKey((String)s.get('Store_Id__c')) && s.get('Resource_Id__c') == null)
                    {
                        Store_Configuration__c storeConfig = (Store_Configuration__c)settings.get((String)s.get('Store_Id__c'));

                        if(storeConfig.Store__r.BillingLatitude == null || storeConfig.Store__r.BillingLongitude == null)
                        {
                            Map<String, Object> geoCodeAddress = new Map<String, Object>();
                            geoCodeAddress.put('id', storeConfig.Id /*settings.get((String)s.get('Store_Id__c')).get('Store__c')*/);
                            geoCodeAddress.put('storeAcct', storeConfig.Store__c);
                            geoCodeAddress.put('city', storeConfig.Store__r.BillingCity);
                            geoCodeAddress.put('state', storeConfig.Store__r.BillingState);
                            geoCodeAddress.put('country', storeConfig.Store__r.BillingCountry);
                            geoCodeAddress.put('zip', storeConfig.Store__r.BillingPostalCode);
                            geoCodeAddress.put('street', storeConfig.Store__r.BillingStreet);
                            geoCodeObj.put(storeConfig.Id, geoCodeAddress);
                            featuresGeoCode.add(geoCodeObj);
                            //objLists.put('features', features);
                            //master.put('geocode', objLists);
                            geometry.put('x', '');
                            geometry.put('y', '');
                            attributes.put('Name', storeConfig.Id);
                            //System.debug(geoCodeAddress);

                        }
                        else
                        {
                            geometry.put('x', storeConfig.Store__r.BillingLongitude);
                            geometry.put('y', storeConfig.Store__r.BillingLatitude);
                            //Add to obj
                            //obj.put('geometry', geometry);
                            //Set Depot name as StoreId
                            attributes.put('Name', storeConfig.Id);
                        }
                        MA_SchedulerSettings ma = (MA_SchedulerSettings)JSON.deserialize((String)s.get('Settings__c') , MA_SchedulerSettings.class);
                        system.debug(ma);
                        system.debug(ma.storeHours);
                        system.debug(ma.timezone);
                        system.debug(ma.resourceHours);
                        Boolean storeFlag = false;
                        JSONParser parser = JSON.createParser((String)s.get('Settings__c'));
                        while (!storeFlag && parser.nextToken() != null)
                        {
                            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'timezone'))
                            {
                                parser.nextToken();
                                dayOfWeek = dateT.format('EEEE', parser.getText());
                            }
                            if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && (parser.getText() == 'storeHours'))
                            {
                                //storeFlag = true;
                                parser.nextToken();
                                while (!storeFlag && parser.nextToken() != JSONToken.END_OBJECT)
                                {
                                  if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && parser.getText() == dayOfWeek.toLowercase())
                                   {
                                        parser.nextToken();
                                        //system.debug(parser.getText());
                                        if(parser.getCurrentToken() == JSONToken.START_ARRAY)
                                        {
                                            while(!storeFlag && parser.nextToken() != JSONToken.END_ARRAY)
                                            {
                                                //system.debug(parser.getText());
                                                if((parser.getCurrentToken() == JSONToken.FIELD_NAME) && parser.getText() == 'start'){
                                                    parser.nextToken();
                                                    attributes.put('TimeWindowStart1', parser.getText());
                                                }
                                                else if((parser.getCurrentToken() == JSONToken.FIELD_NAME) && parser.getText() == 'end'){
                                                    parser.nextToken();
                                                    attributes.put('TimeWindowEnd1', parser.getText());
                                                    //break;
                                                    storeFlag = true;
                                                }
                                            }
                                            //storeFlag = true;
                                        }
                                        else
                                        {
                                            //system.debug(parser.getText());
                                           if((parser.getCurrentToken() == JSONToken.FIELD_NAME) && parser.getText() == 'start'){
                                                parser.nextToken();
                                                attributes.put('TimeWindowStart1', parser.getText());
                                            }
                                            else if((parser.getCurrentToken() == JSONToken.FIELD_NAME) && parser.getText() == 'end'){
                                                parser.nextToken();
                                                attributes.put('TimeWindowEnd1', parser.getText());
                                                //break;
                                                storeFlag = true;
                                            }
                                        }
                                    }
                                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME)) {
                                        while (parser.nextToken() != JSONToken.END_ARRAY) {}
                                    }
                                }
                            }
                        }
                        //configs.put((String)s.get('Store_Id__c'), (String)s.get('Settings__c'));
                        configs.put((String)s.get('Store_Id__c'), s);
                        obj.put('attributes', attributes);
                        obj.put('geometry', geometry);
                        features.add(obj);
                    }
                    else
                    {
                        //Resource settings
                        if(s.get('Resource_Id__c') != null){
                            //configs.put((String)s.get('Resource_Id__c'), (String)s.get('Settings__c'));
                            configs.put((String)s.get('Resource_Id__c'), s);
                        }
                        //Store Settings
                        else{
                            //configs.put((String)s.get('Store_Id__c'), (String)s.get('Settings__c'));
                            configs.put((String)s.get('Store_Id__c'), s);
                        }
                    }
                }
            }
            objListsGeoCode.put('features', featuresGeoCode);
            master.put('geocode', objListsGeoCode); 
            objLists.put('features', features);
            master.put('depots', objLists);
        }
        catch(Exception ex)
        {
            Map<String, Object> errors = new Map<String, Object>();
            List<Object> errorFeatures = new List<Object>();
            objLists = new Map<String, List<Object>>();
            errors.put('success', false);
            errors.put('DepotError', ex.getLineNumber() + ': ' + ex.getMessage());
            errorFeatures.add(errors);
            objLists.put('errors', errorFeatures);
            master.put('error', objLists);
        }
    }
    
    
    
    private class SR{
        Integer wkid;
        private SR(){
            wkid= 4326;
        }
    } 















    /************************************************/
    /*                                              */
    /*      THIS IS JUST A BUFFER CLASS             */
    /*      TO GET TEST COVERAGE UP FOR             */
    /*      EARLIER DEPLOYMENTS                     */
    /*                                              */
    /*      THIS CLASS WILL BE REMOVED              */
    /*      AND ACTUAL TEST COVERAGE WILL           */
    /*      BE INCLUDED IN FINAL DEPLOYMENTS        */
    /*                                              */
    /************************************************/

    public static void testCoverageBuffer() {
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }

}