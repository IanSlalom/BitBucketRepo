/*
Trigger Handler Anthony Strafaccia 2015

This is the class for the OpportunityTrigger that handles all the logic. It is designed so that only one trigger needs to be created for the object and allows for the customization of the order of execution. 

Test Code will be handled inside OpportunityTriggerHandlerTest
*/


public without sharing class OpportunityTriggerHandler{

    /*
    public void OnBeforeInsert(List<Opportunity> listNew){ 
        system.debug('ads INSIDE BEFORE INSERT');    
    } 
    */

    /*
    public void OnBeforeUpdate(List<Opportunity> listOld, List<Opportunity> listNew, Map<Id, Opportunity> mapOld, Map<Id, Opportunity> mapNew){
        system.debug('ads INSIDE BEFORE UPDATE');
    }
    */

    /*
    public void OnBeforeDelete(List<Opportunity> listToDelete, Map<Id, Opportunity> mapToDelete){
        system.debug('ads INSIDE BEFORE DELETE');
    }
    */

    /*
    public void OnAfterInsert(List<Opportunity> listNew, Map<Id, Opportunity> mapNew){
         system.debug('ads INSIDE AFTER INSERT');       
    }
    */

    /*
    public void OnAfterUpdate(List<Opportunity> listOld, List<Opportunity> listNew, Map<Id, Opportunity> mapOld, Map<Id, Opportunity> mapNew){
          system.debug('ads INSIDE AFTER UPDATE');        
    }
    /*

    /*
    public void OnAfterDelete(List<Opportunity> listDeleted, Map<Id, Opportunity> listNew){
         system.debug('ads INSIDE AFTER DELETE'); 
    }
    */

    /*
    public void OnUndelete(List<Opportunity> listRestored){
         system.debug('ads INSIDE ON UNDELETE'); 
    }
    */
}