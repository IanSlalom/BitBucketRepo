<!--**********************************************************************************-->
<!--                                                                                  -->
<!--      This is the main page for the scheduler                                     -->
<!--                                                                                  -->
<!--      @author     Daniel Taylor   (MapAnything)                                   -->
<!--                  Ethan Rush      (MapAnything)                                   -->
<!--                  Eric Osborne    (MapAnything)                                   -->
<!--                                                                                  -->
<!--      @version    6/29/2016   MapAnything                                         -->
<!--      Created                                                                     -->
<!--                                                                                  -->
<!--      @copyright (c)2016 MapAnything. All Rights Reserved.                        -->
<!--      Unauthorized use is prohibited                                              -->
<!--                                                                                  -->
<!--**********************************************************************************-->

<apex:page standardController="RbA_Work_Order__c" showHeader="true" sidebar="false">

    <apex:includeScript value="/soap/ajax/34.0/connection.js" />
    <apex:includeScript value="/soap/ajax/34.0/apex.js" />

    <apex:includeScript value="{!URLFOR($Resource.MA_Scheduler, '/fullcalendar-scheduler-1.2.0/lib/jquery.min.js')}" />

    <script>
        var storeFound = false;
        var isIndividual = true;
        var storeRetrievalProcessed = false;
        var storeIdToResourceIndividualityMap = {};
        var apexMainPageController = 'MA_SchedulerController';
        var processStoreResponse = { onSuccess: processStoreSuccess, onFailure: processResponseError };
        var processTimezoneOptionsResponse = { onSuccess: processTimezoneOptionsSuccess, onFailure: processResponseError };

        $(function() {
            sforce.connection.sessionId = '{!$Api.Session_Id}';
            $('#storeSelectDiv, .hideIndividual').hide();

            retrieveStoreIds();
            retrieveTimezoneOptions();
            checkOnLoadAction();
        });

        /****************************************************/
        /*                                                  */
        /*    check if the page came from a custom button   */
        /*      and perform the necessary start up action   */
        /*                                                  */
        /****************************************************/
        function checkOnLoadAction() {
            var onLoadAction = null;
            var onLoadWorkOrderId = null;
            var urlParams = window.location.search.substr(1).split('&');

            for (var i = 0, len = urlParams.length; i < len; i++) {
                var param = urlParams[i].split('=');
                if (param[0] == 'id') {
                    onLoadWorkOrderId = param[1];
                }
                else if (param[0] == 'action') {
                    onLoadAction = param[1];
                }
            }

            if (onLoadWorkOrderId != null) {
                if (onLoadAction == 'assignResource') {
                    $('#listViewOptionsRecordId').val(onLoadWorkOrderId);
                    showAssignResourceModal(false, false, false);
                }
                else if (onLoadAction == 'scheduleWorkOrder') {
                    $('#listViewOptionsRecordId').val(onLoadWorkOrderId);
                    showAvailabilityModal(false, false);
                }
            }
        }

        /***************************************************/
        /*                                                 */
        /*    retrieves the available timezone options     */
        /*                                                 */
        /***************************************************/
        function retrieveTimezoneOptions() {
            sforce.apex.execute(apexMainPageController, 'retrieveTimezoneOptions', {}, processTimezoneOptionsResponse);
        }

        /***************************************************/
        /*                                                 */
        /*    set available timezone options in picklist   */
        /*                                                 */
        /***************************************************/
        function processTimezoneOptionsSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
                var timezoneOptionsHtml = '';
                for (var key in response.timezoneOptions) {
                    timezoneOptionsHtml += '<option value="' + key + '">' + response.timezoneOptions[key] + '</option>';
                }

                $('#timezoneOptions').append(timezoneOptionsHtml);
            }
        }

        /***************************************************/
        /*                                                 */
        /*    retrieves the users associated stores        */
        /*                                                 */
        /***************************************************/
        function retrieveStoreIds() {
            sforce.apex.execute(apexMainPageController, 'retrieveRecords', { objType: 'Scheduler' }, processStoreResponse);
        }

        /********************************************************************/
        /*                                                                  */
        /*    determines if user is a scheduler or has more than 1 store    */
        /*                                                                  */
        /********************************************************************/
        function processStoreSuccess(response) {
            response = JSON.parse(response);

            if (response.success) {
                var storeSelectOptions = '';
                for (var i = 0, len = response.objList.length; i < len; i++) {
                    var record = response.objList[i];
                    storeIdToResourceIndividualityMap[record.Retail_Location__c] = record.Resource_Type__c != 'Scheduler';
                    storeSelectOptions += '<option value="' + record.Retail_Location__c + '">' + record.Retail_Location__r.Name + '</option>';
                }

                $('#storeSelect').append(storeSelectOptions);

                if ($('#storeSelect option').length > 1) {
                    $('#storeSelectDiv').show();
                }

                var selectedStoreId = $('#storeSelect').val();
                if (selectedStoreId != '' && selectedStoreId != undefined && selectedStoreId != null) {
                    storeFound = true;
                    isIndividual = storeIdToResourceIndividualityMap[selectedStoreId];

                    if (!isIndividual) {
                        $('.hideIndividual').show();
                        showHideListView();
                    }
                }

                storeRetrievalProcessed = true;
                newCalendarFilter = true;
                $('#calendar').fullCalendar('refetchResources');
            }
            else {
                handleError('MA_Scheduler : retrieveStoreIds' + apexMainPageController, response);
            }
        }

        /***************************************************/
        /*                                                 */
        /*    determines if the list view should be        */
        /*      visible when coming from the settings      */
        /*                                                 */
        /***************************************************/
        function showHideListView() {
            var filter = $('#calendarFilter .calendarFilterSelect').val();

            if (isIndividual || filter == undefined || filter == null || filter == '') {
                $('#listView').hide();
            }
            else {
                $('#listView').show();
                $('.listViewportWrapper .refreshListButton').click();
            }
        }

        /***************************************************/
        /*                                                 */
        /*    overrides certain parameters of the          */
        /*      standard list view                         */
        /*                                                 */
        /***************************************************/
        function initializeListViewAttributes() {
            $('.listButtons li:not(".lastItem"), .x-grid3-td-checkbox').hide();
            $('.listViewportWrapper').ajaxComplete(onListViewLoad());
        }

        /***************************************************/
        /*                                                 */
        /*    creates the onclick popup for the list view  */
        /*                                                 */
        /***************************************************/
        function onListViewLoad() {
            setTimeout(function() {
                var records = $('.listViewportWrapper .x-grid3-row .x-grid3-col');
                for (var i = 0, len = records.length; i < len; i++) {
                    var record = records[i];

                    record.onclick = function(e) {
                        var workOrderElRow = $(this).closest('.x-grid3-row')[0];
                        var workOrderId = $(workOrderElRow).find('.x-grid3-col-LIST_RECORD_ID').text();
                        $('#listViewOptionsRecordId').val(workOrderId);
                        $('#listViewOptionsModal').css({ position: 'absolute', top: (e.pageY - 110), left: e.pageX }).show();
                    };

                    var links = $(record).find('a, input[type="checkbox"]');
                    for (var x = 0, linkLen = links.length; x < linkLen; x++) {
                        var link = links[x];
                        link.onclick = function(event) {
                            event.cancelBubble = true;
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            }
                        };
                    }
                }
            }, 500);
        }

        /***************************************************/
        /*                                                 */
        /*    closes the list view popup                   */
        /*                                                 */
        /***************************************************/
        function closeListViewOptionsModal() {
            $('#listViewOptionsModal').hide();
        }

        /***************************************************/
        /*                                                 */
        /*    formats address based on missing data        */
        /*                                                 */
        /***************************************************/
        function formatAddress(address) {
            address = address.replace(new RegExp('undefined', 'g'), '').replace(', ,', ',').replace(',  ', ', ');
            if (address.startsWith(', ')) {
                address = address.substring(2);
            }
            if (address.endsWith(', ')) {
                address = address.substring(0, address.lastIndexOf(', '));
            }

            return address;
        }

        /***************************************************/
        /*                                                 */
        /*    process and asynchronous error               */
        /*                                                 */
        /***************************************************/
        function processResponseError(error) {
            if (!error.faultstring) {
                error = { error: 'Response Error'};
            }
            handleError('ERROR', error);
        }

        /************************************************************/
        /*                                                          */
        /*    creates an error message and generates the modal      */
        /*                                                          */
        /************************************************************/
        function handleError(componentName, error) {
            $('#errorMessage').text(componentName + ' : ' + (error.error ? error.error : error.faultstring));
            $('#errorModal').show();
            $('#errorModal').addClass('ma-open');
            $('#errorModalOverlay').addClass('ma-in');
            $('#loaderModal').hide();
        }
        
        /***************************************************/
        /*                                                 */
        /*    closes the calendar event and list view      */
        /*    popup when clicked off of                    */
        /*                                                 */
        /***************************************************/
        $(document).mouseup(function (e) {
            var container = $("#listViewOptionsModal, #eventOptionsModal");
        
            // if the target of the click isn't the container... nor a descendant of the container
            if (!container.is(e.target) && container.has(e.target).length === 0) {
                container.hide();
            }
        });
        
        $( document ).ready(function() {
            $('#errorModal').addClass('ma-in');
        });

        /***************************************************/
        /*                                                 */
        /*    opens the work order in a new window         */
        /*    and refreshes the calendar when the          */
        /*    window is closed                             */
        /*                                                 */
        /***************************************************/
        function viewEditWorkOrder(isCalendar) {
            var workOrderId;
            if (isCalendar) {
                workOrderId = $('#eventOptionsRecordId').val();
            }
            else {
                workOrderId = $('#listViewOptionsRecordId').val();
            }

            var win = window.open('/' + workOrderId, '_blank', 'height=500, width=800, location=no, menubar=no, scrollbars=yes, status=no, titlebar=no, toolbar=no, resizable=yes, fullscreen=no');
            var winTimer = setInterval(function() {
                if (win.closed) {
                    clearInterval(winTimer);
                    if (!isBatchResources) {
                        $('#loaderModal').show();
                        $('.listViewportWrapper .refreshListButton').click();
                        $('#calendar').fullCalendar('refetchEvents');
                        $('#loaderModal').hide();
                    }
                }
            }, 500);
        }
        
    </script>

    <c:MA_SchedulerErrorComp />
    <c:MA_SchedulerLoaderComp />
    <c:MA_SchedulerStylingComp />
    <apex:stylesheet value="{!URLFOR($Resource.MA_Scheduler, '/css/ma2-style.css')}" />
    <c:MA_SchedulerSettingsComp />
    <c:MA_SchedulerAssignResourceComp />
    <c:MA_SchedulerCancelAppointmentComp />
    <c:MA_SchedulerWorkOrderSchedulingComp />
    <c:MA_SchedulerRoutes />
    <c:MA_SchedulerMainNav />
    <c:MA_SchedulerResourceRouteComp />
    <c:MA_SchedulerGeocodeComp />
    <c:MA_SchedulerCalendarComp />

    <div id="listView" class="hideIndividual pad-0-10 batchHide" style="display: none;">
        <apex:enhancedList id="unscheduledListView" type="RbA_Work_Order__c" height="300" rowsPerPage="25" customizable="true" oncomplete="initializeListViewAttributes()" />
    </div>

    <div id="listViewOptionsModal">
        <input type="hidden" id="listViewOptionsRecordId" />
        <div id="" onclick="showAvailabilityModal(false, false); closeListViewOptionsModal();">Schedule Work Order</div>
        <div onclick="showAssignResourceModal(false, false, false); closeListViewOptionsModal();">Assign a Resource</div>
        <div onclick="viewEditWorkOrder(false); closeListViewOptionsModal();">View / Edit</div>
    </div>

</apex:page>